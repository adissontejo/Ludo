/* Ludo_board_i
 * Author: LENOVO
 * Creation date: 23/06/2025
 */

IMPLEMENTATION Ludo_board_i
REFINES Ludo_board

SEES Ludo_ctx

CONCRETE_VARIABLES
  externalBoard,
  internalBoard

INVARIANT
  externalBoard : PIECES --> -1..numExternal-1 &
  internalBoard : PIECES --> -1..numInternal-1 &
  dom(externalBoard |> {-1}) /\ dom(internalBoard |> {-1}) = lockedPieces &
  externalBoard |>> {-1} = externalPos &
  internalBoard |>> {-1} = internalPos

INITIALISATION
  VAR ii, pp IN
    ii := 0;
    WHILE ii < numPieces
    DO
      pp := piecesOrder(ii);
      externalBoard(pp) := -1;
      internalBoard(pp) := -1;
      ii := ii + 1
    INVARIANT
      ii : NAT &
      ii < numPieces &
      (piecesOrder[0..ii-1] <| externalBoard) = piecesOrder[0..ii-1] * {-1} &
      (piecesOrder[0..ii-1] <| internalBoard) = piecesOrder[0..ii-1] * {-1}
    VARIANT numPieces - ii
    END
  END

OPERATIONS

  clear =
    BEGIN
      VAR ii, pp IN
        ii := 0;
        WHILE ii < numPieces
        DO
          pp := piecesOrder(ii);
          externalBoard(pp) := -1;
          internalBoard(pp) := -1;
          ii := ii + 1
        INVARIANT
          ii : NAT &
          ii < numPieces &
          (piecesOrder[0..ii-1] <| externalBoard) = piecesOrder[0..ii-1] * {-1} &
          (piecesOrder[0..ii-1] <| internalBoard) = piecesOrder[0..ii-1] * {-1}
        VARIANT numPieces - ii
        END
      END
    END;

  setFree(pp) =
    BEGIN
      externalBoard(pp) := startPoint(colorOf(pp))
    END;

  atePiece <-- setExternalPos(pp, nn) =
    BEGIN
      VAR rest, currentColor, atePiece, otherColor, otherPos, ii
      IN
        rest := nn mod 13;
        IF rest /= 0 & rest /= 8
        THEN
          ii := 0;
          currentColor := colorOf(pp);
          atePiece := FALSE;
          WHILE ii < numPieces & atePiece = FALSE
          DO
            otherColor := colorOf(piecesOrder(ii));
            otherPos := externalBoard(piecesOrder(ii));
            IF otherColor /= currentColor & otherPos = nn THEN
              externalBoard(piecesOrder(ii)) := -1;
              atePiece := TRUE
            END;
            ii := ii + 1
          INVARIANT
            externalBoard : PIECES --> -1..numExternal-1 &
            ii : NAT &
            ii <= numPieces &
            (atePiece = TRUE <=> (((piecesOrder[0..ii-1] <| externalPos)~;colorOf)[{nn}]) - {colorOf(pp)} /= {}) &
            (atePiece = TRUE => card(externalBoard |> {nn}) = 0)

          VARIANT numPieces - ii
          END
        END
      END;
      externalBoard(pp) := nn
    END;

  setInternalPos(pp, nn) =
    BEGIN
      externalBoard(pp) := -1;
      internalBoard(pp) := nn
    END;
    
  ee, ii <-- getPos(pp) = 
    BEGIN
      ee := externalBoard(pp);
      ii := internalBoard(pp)
    END;
    
  bb <-- isLocked(pp) =
  BEGIN
     VAR extenalPos, internalPos
     IN
         extenalPos := externalBoard(pp);
         internalPos := internalBoard(pp);
         
        IF extenalPos = -1 & internalPos = -1 THEN
            bb := TRUE
        ELSE
            bb := FALSE
        END 
     END
         
    END
END
