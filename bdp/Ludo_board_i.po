THEORY ProofList IS
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & WellDefinedness_getPos.4,(_f(79) => _f(94));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & WellDefinedness_getPos.3,(_f(79) => _f(93));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & WellDefinedness_getPos.2,(_f(79) => _f(92));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & WellDefinedness_getPos.1,(_f(79) => _f(91));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.17,(_f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(33) & _f(34) & _f(79) => _f(90));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.16,(_f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(25) & _f(26) & _f(79) => _f(90));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.15,(_f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(25) & _f(26) & _f(79) => _f(86));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.14,(_f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(25) & _f(26) & _f(79) => _f(85));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.13,(_f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(79) => _f(89));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.12,(_f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(79) => _f(88));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.11,(_f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(79) => _f(83));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.10,(_f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(79) => _f(87));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.9,(_f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(79) => _f(86));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.8,(_f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(79) => _f(85));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.7,(_f(20) & _f(21) & _f(36) & _f(37) & _f(76) & _f(77) & _f(78) & _f(34) & _f(79) => _f(84));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.6,(_f(20) & _f(21) & _f(36) & _f(37) & _f(76) & _f(77) & _f(79) => _f(83));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.5,(_f(20) & _f(21) & _f(36) & _f(37) & _f(76) & _f(77) & _f(79) => _f(82));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.4,(_f(20) & _f(21) & _f(79) => _f(83));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.3,(_f(20) & _f(21) & _f(79) => _f(82));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.2,(_f(79) => _f(81));
_f(1) & _f(2) & _f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(19) & WellDefinedness_setExternalPos.1,(_f(79) => _f(80));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_getPos.6,(_f(10) & _f(70) & _f(17) & _f(3) => _f(73));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_getPos.5,(_f(10) & _f(70) & _f(17) & _f(3) => _f(74));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_getPos.4,(_f(10) & _f(70) & _f(71) & _f(3) => _f(75));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_getPos.3,(_f(10) & _f(70) & _f(71) & _f(3) => _f(74));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_getPos.2,(_f(10) & _f(69) & _f(3) => _f(73));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_getPos.1,(_f(10) & _f(69) & _f(3) => _f(72));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setInternalPos.5,(_f(10) & _f(16) & _f(63) & _f(3) => _f(68));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setInternalPos.4,(_f(10) & _f(16) & _f(63) & _f(3) => _f(67));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setInternalPos.3,(_f(10) & _f(16) & _f(63) & _f(3) => _f(66));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setInternalPos.2,(_f(10) & _f(16) & _f(63) & _f(3) => _f(65));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setInternalPos.1,(_f(10) & _f(16) & _f(63) & _f(3) => _f(64));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.19,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(43) & _f(42) & _f(3) => _f(62));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.18,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(43) & _f(42) & _f(3) => _f(61));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.17,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(43) & _f(42) & _f(3) => _f(58));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.16,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(43) & _f(40) & _f(41) & _f(3) => _f(60));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.15,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(43) & _f(40) & _f(41) & _f(3) => _f(59));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.14,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(43) & _f(40) & _f(41) & _f(3) => _f(58));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.13,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(22) & _f(39) & _f(42) & _f(52) => _f(57));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.12,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(22) & _f(39) & _f(42) & _f(52) => _f(56));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.11,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(22) & _f(39) & _f(42) & _f(52) => _f(53));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.10,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(22) & _f(39) & _f(40) & _f(41) & _f(52) => _f(55));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.9,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(22) & _f(39) & _f(40) & _f(41) & _f(52) => _f(54));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.8,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(22) & _f(39) & _f(40) & _f(41) & _f(52) => _f(53));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.7,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(33) & _f(35) & _f(50) => _f(51));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.6,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(25) & _f(26) & _f(27) & _f(50) => _f(51));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.5,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(22) & _f(48) => _f(49));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.4,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(33) & _f(35) & _f(36) & _f(37) & _f(30) & _f(31) & _f(38) & _f(34) & _f(44) => _f(47));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.3,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(33) & _f(34) & _f(46) => _f(27));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.2,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(25) & _f(26) & _f(27) & _f(28) & _f(29) & _f(30) & _f(31) & _f(32) & _f(44) => _f(45));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setExternalPos.1,(_f(10) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(22) & _f(23) & _f(24) & _f(25) & _f(26) & _f(44) => _f(27));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setFree.3,(_f(10) & _f(11) & _f(12) & _f(3) => _f(15));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setFree.2,(_f(10) & _f(11) & _f(12) & _f(3) => _f(14));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_setFree.1,(_f(10) & _f(11) & _f(12) & _f(3) => _f(13));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_clear.4,(_f(3) => _f(7));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_clear.3,(_f(3) => _f(6));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_clear.2,(_f(3) => _f(5));
_f(1) & _f(2) & _f(8) & _f(9) & Operation_clear.1,(_f(3) => _f(4));
_f(1) & _f(2) & Initialisation.4,(_f(3) => _f(7));
_f(1) & _f(2) & Initialisation.3,(_f(3) => _f(6));
_f(1) & _f(2) & Initialisation.2,(_f(3) => _f(5));
_f(1) & _f(2) & Initialisation.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
COLORS: FIN(INTEGER) & not(COLORS = {}) & PIECES: FIN(INTEGER) & not(PIECES = {}) & ((numPiecesByColor) = (4)) & ((numExternal) = (52)) & ((numInternal) = (6)) & ((numColors) = (4)) & ((card(COLORS)) = (numColors)) & ((numPieces) : (NAT)) & ((numPieces) = ((numPiecesByColor * numColors))) & ((diceOptions) = (((1) .. (6)))) & stars : POW( ((0) .. ((numExternal - 1)))) & ((stars) = (({8}\/{21}\/{34}\/{47}))) & startPoint : COLORS +-> ((0) .. (51)) & startPoint : COLORS --> ((0) .. (51)) & startPoint~ : ((0) .. (51)) +-> COLORS & ((startPoint) : (((COLORS) >-> (((0) .. (51)))))) & ((card(PIECES)) = ((numPiecesByColor * numColors))) & colorsOrder : ((0) .. (3)) +-> COLORS & colorsOrder : ((0) .. (3)) >+> COLORS & colorsOrder : ((0) .. (3)) +->> COLORS & colorsOrder : ((0) .. (3)) --> COLORS & dom(colorsOrder) = ((0) .. (3)) & colorsOrder~ : COLORS +-> ((0) .. (3)) & ran(colorsOrder) = COLORS & ((colorsOrder) : (((((0) .. (3))) >->> (COLORS)))) & colorOf : PIECES +-> COLORS & colorOf : PIECES --> COLORS & colorOf : PIECES +->> COLORS & dom(colorOf) = PIECES & ran(colorOf) = COLORS & ((colorOf) : (((PIECES) -->> (COLORS)))) & !(cc).(((((cc) : (COLORS))) => (((((colorOf)~ )[({cc})]) : (FIN(PIECES))) & ((card(((colorOf)~ )[({cc})])) = (numPiecesByColor))))) & piecesOrder : ((0) .. (15)) +-> PIECES & piecesOrder : ((0) .. (15)) >+> PIECES & piecesOrder : ((0) .. (15)) +->> PIECES & piecesOrder : ((0) .. (15)) --> PIECES & dom(piecesOrder) = ((0) .. (15)) & piecesOrder~ : PIECES +-> ((0) .. (15)) & ran(piecesOrder) = PIECES & ((piecesOrder) : (((((0) .. (15))) >->> (PIECES))));
"Refinement is correct";
(((PIECES * ({-1}))) : (((PIECES) --> (((-1) .. ((numExternal - 1)))))));
(((PIECES * ({-1}))) : (((PIECES) --> (((-1) .. ((numInternal - 1)))))));
((((dom((((PIECES * ({-1}))) |> (({-1}))))) /\ (dom((((PIECES * ({-1}))) |> (({-1}))))))) = (PIECES));
(((((PIECES * ({-1}))) |>> (({-1})))) = ({}));
((lockedPieces) : (POW(PIECES))) & ((externalPos) : (((PIECES) +-> (((0) .. ((numExternal - 1))))))) & ((internalPos) : (((PIECES) +-> (((0) .. ((numInternal - 1))))))) & ((((dom(externalPos)) /\ (dom(internalPos)))) = ({})) & ((((dom(externalPos)) /\ (lockedPieces))) = ({})) & ((((dom(internalPos)) /\ (lockedPieces))) = ({})) & ((((((dom(externalPos)) \/ (dom(internalPos)))) \/ (lockedPieces))) = (PIECES)) & !(nn).(((((nn) : (((0) .. ((numExternal - 1)))))) => ((card(((externalPos) |> (({nn})))) <= 2) & ((not(((nn) : (((stars) \/ (ran(startPoint))))))) => ((card(((((externalPos)~) ; (colorOf)) )[({nn})]) <= 1))))));
externalBoard$1 : PIECES +-> ((-1) .. ((numExternal - 1))) & dom(externalBoard$1) = PIECES & ((externalBoard$1) : (((PIECES) --> (((-1) .. ((numExternal - 1))))))) & internalBoard$1 : PIECES +-> ((-1) .. ((numInternal - 1))) & dom(internalBoard$1) = PIECES & ((internalBoard$1) : (((PIECES) --> (((-1) .. ((numInternal - 1))))))) & ((((dom(((externalBoard$1) |> (({-1}))))) /\ (dom(((internalBoard$1) |> (({-1}))))))) = (lockedPieces)) & ((((externalBoard$1) |>> (({-1})))) = (externalPos)) & ((((internalBoard$1) |>> (({-1})))) = (internalPos));
((pp) : (PIECES));
((pp) : (lockedPieces));
(card(((externalPos) |> (({(startPoint )((colorOf )(pp))})))) +1 <= 2);
((((externalBoard$1) <+ (({((pp) |-> (0))})))) : (((PIECES) --> (((-1) .. ((numExternal - 1)))))));
((((dom(((((externalBoard$1) <+ (({((pp) |-> (0))})))) |> (({-1}))))) /\ (dom(((internalBoard$1) |> (({-1}))))))) = ((lockedPieces - ({pp}))));
((((((externalBoard$1) <+ (({((pp) |-> (0))})))) |>> (({-1})))) = (((externalPos) <+ (({((pp) |-> ((startPoint )((colorOf )(pp))))})))));
not(((pp) : (lockedPieces)));
not(((pp) : (dom(internalPos))));
((nn) : (((0) .. ((numExternal - 1)))));
(card(((externalPos) |> (({nn})))) +1 <= 2);
not(((((nn) mod (13))) = (0)));
not(((((nn) mod (13))) = (8)));
((externalBoard : PIECES +-> ((-1) .. ((numExternal - 1))) & dom(externalBoard) = PIECES & ((externalBoard) : (((PIECES) --> (((-1) .. ((numExternal - 1))))))) & ((hasOtherColor) : (BOOL)) & ((ii) : (NAT)) & (ii <= numPieces) & ((((hasOtherColor) = (TRUE))) => (not(((((((((((piecesOrder )[((0) .. ((ii - 1)))]) <| (externalPos)))~) ; (colorOf)) )[({nn})] - ({(colorOf )(pp)}))) = ({}))))) & ((not(((((((((((piecesOrder )[((0) .. ((ii - 1)))]) <| (externalPos)))~) ; (colorOf)) )[({nn})] - ({(colorOf )(pp)}))) = ({})))) => (((hasOtherColor) = (TRUE)))) & ((hasOtherColor) = (TRUE))) => (((card(((externalBoard) |> (({nn}))))) = (0))));
(ii +1 <= numPieces);
((hasOtherColor) = (FALSE));
not((((colorOf )((piecesOrder )(ii))) = ((colorOf )(pp))));
(((externalBoard )((piecesOrder )(ii))) = (nn));
((card(((externalPos) |> (({nn}))))) = (0));
((externalBoard) <+ (({(((piecesOrder )(ii)) |-> (-1))}))) : PIECES +-> ((-1) .. ((numExternal - 1))) & dom(((externalBoard) <+ (({(((piecesOrder )(ii)) |-> (-1))})))) = PIECES & ((((externalBoard) <+ (({(((piecesOrder )(ii)) |-> (-1))})))) : (((PIECES) --> (((-1) .. ((numExternal - 1)))))));
((TRUE) : (BOOL));
(((ii + 1)) : (NAT));
((ii + 1) <= numPieces);
not(((((((((((piecesOrder )[((0) .. (((ii + 1) - 1)))]) <| (externalPos)))~) ; (colorOf)) )[({nn})] - ({(colorOf )(pp)}))) = ({})));
not(not((((colorOf )((piecesOrder )(ii))) = ((colorOf )(pp)))) & (((externalBoard )((piecesOrder )(ii))) = (nn)));
((hasOtherColor) = (TRUE));
((((hasOtherColor) = (TRUE))) => (((card(((externalPos) |> (({nn}))))) = (0))));
externalBoard : PIECES +-> ((-1) .. ((numExternal - 1))) & dom(externalBoard) = PIECES & ((externalBoard) : (((PIECES) --> (((-1) .. ((numExternal - 1)))))));
((hasOtherColor) : (BOOL));
((((hasOtherColor) = (TRUE))) => (not(((((((((((piecesOrder )[((0) .. (((ii + 1) - 1)))]) <| (externalPos)))~) ; (colorOf)) )[({nn})] - ({(colorOf )(pp)}))) = ({}))))) & ((not(((((((((((piecesOrder )[((0) .. (((ii + 1) - 1)))]) <| (externalPos)))~) ; (colorOf)) )[({nn})] - ({(colorOf )(pp)}))) = ({})))) => (((hasOtherColor) = (TRUE))));
not((ii +1 <= numPieces) & ((hasOtherColor) = (FALSE)));
not(((nn) : (((stars) \/ (ran(startPoint))))));
not((((((((externalPos)~) ; (colorOf)) )[({nn})] - ({(colorOf )(pp)}))) = ({})));
not(not(((nn) : (((stars) \/ (ran(startPoint)))))) & not((((((((externalPos)~) ; (colorOf)) )[({nn})] - ({(colorOf )(pp)}))) = ({}))));
not(not(((((nn) mod (13))) = (0))) & not(((((nn) mod (13))) = (8))));
"Loop invariant is preserved";
((card(((((externalBoard) <+ (({(((piecesOrder )(ii)) |-> (-1))})))) |> (({nn}))))) = (0));
"Assert predicate";
((card(((externalBoard) |> (({nn}))))) = (0));
"Loop variant is positive";
(0 <= (numPieces - ii));
"Variant is decreasing";
((numPieces - (ii + 1)) +1 <= (numPieces - ii));
"End of loop";
((((externalBoard) <+ (({((pp) |-> (nn))})))) : (((PIECES) --> (((-1) .. ((numExternal - 1)))))));
((((dom(((((externalBoard) <+ (({((pp) |-> (nn))})))) |> (({-1}))))) /\ (dom(((internalBoard$1) |> (({-1}))))))) = (((lockedPieces) \/ (((externalPos)~ )[({nn})]))));
((((((externalBoard) <+ (({((pp) |-> (nn))})))) |>> (({-1})))) = (((((externalPos) |>> (({nn})))) <+ (({((pp) |-> (nn))})))));
((((dom(((((externalBoard) <+ (({((pp) |-> (nn))})))) |> (({-1}))))) /\ (dom(((internalBoard$1) |> (({-1}))))))) = (lockedPieces));
((((((externalBoard) <+ (({((pp) |-> (nn))})))) |>> (({-1})))) = (((externalPos) <+ (({((pp) |-> (nn))})))));
((((externalBoard$1) <+ (({((pp) |-> (nn))})))) : (((PIECES) --> (((-1) .. ((numExternal - 1)))))));
((((dom(((((externalBoard$1) <+ (({((pp) |-> (nn))})))) |> (({-1}))))) /\ (dom(((internalBoard$1) |> (({-1}))))))) = (((lockedPieces) \/ (((externalPos)~ )[({nn})]))));
((((((externalBoard$1) <+ (({((pp) |-> (nn))})))) |>> (({-1})))) = (((((externalPos) |>> (({nn})))) <+ (({((pp) |-> (nn))})))));
((((dom(((((externalBoard$1) <+ (({((pp) |-> (nn))})))) |> (({-1}))))) /\ (dom(((internalBoard$1) |> (({-1}))))))) = (lockedPieces));
((((((externalBoard$1) <+ (({((pp) |-> (nn))})))) |>> (({-1})))) = (((externalPos) <+ (({((pp) |-> (nn))})))));
((nn) : (((0) .. ((numInternal - 1)))));
((((externalBoard$1) <+ (({((pp) |-> (-1))})))) : (((PIECES) --> (((-1) .. ((numExternal - 1)))))));
((((internalBoard$1) <+ (({((pp) |-> (nn))})))) : (((PIECES) --> (((-1) .. ((numInternal - 1)))))));
((((dom(((((externalBoard$1) <+ (({((pp) |-> (-1))})))) |> (({-1}))))) /\ (dom(((((internalBoard$1) <+ (({((pp) |-> (nn))})))) |> (({-1}))))))) = (lockedPieces));
((((((externalBoard$1) <+ (({((pp) |-> (-1))})))) |>> (({-1})))) = (((({pp})) <<| (externalPos))));
((((((internalBoard$1) <+ (({((pp) |-> (nn))})))) |>> (({-1})))) = (((internalPos) <+ (({((pp) |-> (nn))})))));
((pp) : (dom(externalPos)));
not(((pp) : (dom(externalPos))));
((pp) : (dom(internalPos)));
(((externalBoard$1 )(pp)) = ((externalPos )(pp)));
(((internalBoard$1 )(pp)) = (-1));
(((externalBoard$1 )(pp)) = (-1));
(((internalBoard$1 )(pp)) = ((internalPos )(pp)));
((ii) : (NAT));
(ii <= numPieces);
((((hasOtherColor) = (TRUE))) => (not(((((((((((piecesOrder )[((0) .. ((ii - 1)))]) <| (externalPos)))~) ; (colorOf)) )[({nn})] - ({(colorOf )(pp)}))) = ({}))))) & ((not(((((((((((piecesOrder )[((0) .. ((ii - 1)))]) <| (externalPos)))~) ; (colorOf)) )[({nn})] - ({(colorOf )(pp)}))) = ({})))) => (((hasOtherColor) = (TRUE))));
"Operation is well defined";
(0 <= nn);
(1 <= 13);
((pp) : (dom(colorOf)));
((colorOf) : (((dom(colorOf)) +-> (ran(colorOf)))));
((((externalBoard) |> (({nn})))) : (FIN(((externalBoard) |> (({nn}))))));
((ii) : (dom(piecesOrder)));
((piecesOrder) : (((dom(piecesOrder)) +-> (ran(piecesOrder)))));
(((piecesOrder )(ii)) : (dom(colorOf)));
(((piecesOrder )(ii)) : (dom(externalBoard)));
((externalBoard) : (((dom(externalBoard)) +-> (ran(externalBoard)))));
((((externalPos) |> (({nn})))) : (FIN(((externalPos) |> (({nn}))))));
((pp) : (dom(externalBoard$1)));
((externalBoard$1) : (((dom(externalBoard$1)) +-> (ran(externalBoard$1)))));
((pp) : (dom(internalBoard$1)));
((internalBoard$1) : (((dom(internalBoard$1)) +-> (ran(internalBoard$1)))))
END
&
THEORY EnumerateX
END
