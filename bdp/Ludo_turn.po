THEORY ProofList IS
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & WellDefinedness_nextTurn.14,(_f(35) & _f(46) => _f(52));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & WellDefinedness_nextTurn.13,(_f(35) & _f(46) => _f(56));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & WellDefinedness_nextTurn.12,(_f(35) & _f(46) => _f(50));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & WellDefinedness_nextTurn.11,(_f(35) & _f(46) => _f(55));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & WellDefinedness_nextTurn.10,(_f(35) & _f(46) => _f(48));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & WellDefinedness_nextTurn.9,(_f(35) & _f(46) => _f(47));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & WellDefinedness_nextTurn.8,(_f(46) => _f(54));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & WellDefinedness_nextTurn.7,(_f(46) => _f(53));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & WellDefinedness_nextTurn.6,(_f(45) & _f(46) => _f(52));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & WellDefinedness_nextTurn.5,(_f(45) & _f(46) => _f(51));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & WellDefinedness_nextTurn.4,(_f(45) & _f(46) => _f(50));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & WellDefinedness_nextTurn.3,(_f(45) & _f(46) => _f(49));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & WellDefinedness_nextTurn.2,(_f(45) & _f(46) => _f(48));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & WellDefinedness_nextTurn.1,(_f(45) & _f(46) => _f(47));
_f(1) & _f(2) & _f(9) & _f(21) & _f(37) & Operation_rollDice.5,(_f(38) & _f(42) & _f(4) => _f(43));
_f(1) & _f(2) & _f(9) & _f(21) & _f(37) & Operation_rollDice.4,(_f(38) & _f(39) & _f(41) & _f(4) => _f(7));
_f(1) & _f(2) & _f(9) & _f(21) & _f(37) & Operation_rollDice.3,(_f(38) & _f(39) & _f(41) & _f(4) => _f(6));
_f(1) & _f(2) & _f(9) & _f(21) & _f(37) & Operation_rollDice.2,(_f(38) & _f(39) & _f(40) & _f(4) => _f(44));
_f(1) & _f(2) & _f(9) & _f(21) & _f(37) & Operation_rollDice.1,(_f(38) & _f(39) & _f(40) & _f(4) => _f(43));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & Operation_nextTurn.3,(_f(35) & _f(4) => _f(36));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & Operation_nextTurn.2,(_f(35) & _f(4) => _f(7));
_f(1) & _f(2) & _f(9) & _f(21) & _f(33) & _f(34) & Operation_nextTurn.1,(_f(35) & _f(4) => _f(6));
_f(1) & _f(2) & _f(9) & _f(21) & _f(22) & _f(23) & _f(24) & _f(25) & Operation_computeAction.6,(_f(27) & _f(29) & _f(4) => _f(6));
_f(1) & _f(2) & _f(9) & _f(21) & _f(22) & _f(23) & _f(24) & _f(25) & Operation_computeAction.5,(_f(27) & _f(28) & _f(4) => _f(6));
_f(1) & _f(2) & _f(9) & _f(21) & _f(22) & _f(23) & _f(24) & _f(25) & Operation_computeAction.4,(_f(26) & _f(4) => _f(32));
_f(1) & _f(2) & _f(9) & _f(21) & _f(22) & _f(23) & _f(24) & _f(25) & Operation_computeAction.3,(_f(26) & _f(4) => _f(31));
_f(1) & _f(2) & _f(9) & _f(21) & _f(22) & _f(23) & _f(24) & _f(25) & Operation_computeAction.2,(_f(26) & _f(4) => _f(30));
_f(1) & _f(2) & _f(9) & _f(21) & _f(22) & _f(23) & _f(24) & _f(25) & Operation_computeAction.1,(_f(26) & _f(4) => _f(6));
_f(1) & _f(2) & _f(9) & _f(12) & _f(18) & Operation_initGame.5,(_f(19) & _f(4) => _f(20));
_f(1) & _f(2) & _f(9) & _f(12) & _f(18) & Operation_initGame.4,(_f(19) & _f(4) => _f(5));
_f(1) & _f(2) & _f(9) & _f(12) & _f(18) & Operation_initGame.3,(_f(19) & _f(4) => _f(8));
_f(1) & _f(2) & _f(9) & _f(12) & _f(18) & Operation_initGame.2,(_f(19) & _f(4) => _f(7));
_f(1) & _f(2) & _f(9) & _f(12) & _f(18) & Operation_initGame.1,(_f(19) & _f(4) => _f(6));
_f(1) & _f(2) & _f(9) & _f(10) & _f(15) & _f(12) & Operation_unpickColor.2,(_f(4) => _f(17));
_f(1) & _f(2) & _f(9) & _f(10) & _f(15) & _f(12) & Operation_unpickColor.1,(_f(4) => _f(16));
_f(1) & _f(2) & _f(9) & _f(10) & _f(11) & _f(12) & Operation_pickColor.2,(_f(4) => _f(14));
_f(1) & _f(2) & _f(9) & _f(10) & _f(11) & _f(12) & Operation_pickColor.1,(_f(4) => _f(13));
_f(1) & _f(2) & Initialisation.5,(_f(3) & _f(4) => _f(5));
_f(1) & _f(2) & Initialisation.4,(_f(3) & _f(4) => _f(8));
_f(1) & _f(2) & Initialisation.3,(_f(3) & _f(4) => _f(7));
_f(1) & _f(2) & Initialisation.2,(_f(3) & _f(4) => _f(6));
_f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
COLORS: FIN(INTEGER) & not(COLORS = {}) & PIECES: FIN(INTEGER) & not(PIECES = {}) & ((numPiecesByColor) = (4)) & ((numExternal) = (52)) & ((numInternal) = (6)) & ((numColors) = (4)) & ((card(COLORS)) = (numColors)) & ((numPieces) : (NAT)) & ((numPieces) = ((numPiecesByColor * numColors))) & ((diceOptions) = (((1) .. (6)))) & stars : POW( ((0) .. ((numExternal - 1)))) & ((stars) = (({8}\/{21}\/{34}\/{47}))) & startPoint : COLORS +-> ((0) .. (51)) & startPoint : COLORS --> ((0) .. (51)) & startPoint~ : ((0) .. (51)) +-> COLORS & ((startPoint) : (((COLORS) >-> (((0) .. (51)))))) & ((card(PIECES)) = ((numPiecesByColor * numColors))) & colorsOrder : ((0) .. (3)) +-> COLORS & colorsOrder : ((0) .. (3)) >+> COLORS & colorsOrder : ((0) .. (3)) +->> COLORS & colorsOrder : ((0) .. (3)) --> COLORS & dom(colorsOrder) = ((0) .. (3)) & colorsOrder~ : COLORS +-> ((0) .. (3)) & ran(colorsOrder) = COLORS & ((colorsOrder) : (((((0) .. (3))) >->> (COLORS)))) & colorOf : PIECES +-> COLORS & colorOf : PIECES --> COLORS & colorOf : PIECES +->> COLORS & dom(colorOf) = PIECES & ran(colorOf) = COLORS & ((colorOf) : (((PIECES) -->> (COLORS)))) & !(cc).(((((cc) : (COLORS))) => (((((colorOf)~ )[({cc})]) : (FIN(PIECES))) & ((card(((colorOf)~ )[({cc})])) = (numPiecesByColor))))) & piecesOrder : ((0) .. (15)) +-> PIECES & piecesOrder : ((0) .. (15)) >+> PIECES & piecesOrder : ((0) .. (15)) +->> PIECES & piecesOrder : ((0) .. (15)) --> PIECES & dom(piecesOrder) = ((0) .. (15)) & piecesOrder~ : PIECES +-> ((0) .. (15)) & ran(piecesOrder) = PIECES & ((piecesOrder) : (((((0) .. (15))) >->> (PIECES))));
((color) : (COLORS));
"Invariant is preserved";
(({}) : (FIN({})));
((0) : (((0) .. (6))));
((0) : (((0) .. (2))));
(({}) : (((((0) .. ((numColors - 1)))) >+> (COLORS))));
((gameStarted) : (BOOL)) & ((enabledColors) : (POW(COLORS))) & ((enabledColors) : (FIN(enabledColors))) & ((color) : (COLORS)) & ((hasRoll) : (BOOL)) & ((diceValue) : (((0) .. (6)))) & ((sixSequenceCount) : (((0) .. (2)))) & finishOrder : ((0) .. ((numColors - 1))) +-> COLORS & finishOrder~ : COLORS +-> ((0) .. ((numColors - 1))) & ((finishOrder) : (((((0) .. ((numColors - 1)))) >+> (COLORS)))) & ((finishOrder) : (FIN(finishOrder))) & ((((gameStarted) = (FALSE))) or ((2 <= card(enabledColors)) & ((color) : (enabledColors)) & ran(finishOrder) : POW( enabledColors)));
((cc) : (COLORS));
not(((cc) : (enabledColors)));
((gameStarted) = (FALSE));
((((enabledColors) \/ (({cc})))) : (FIN(((enabledColors) \/ (({cc}))))));
((((gameStarted) = (FALSE))) or ((2 <= card(((enabledColors) \/ (({cc}))))) & ((color) : (((enabledColors) \/ (({cc}))))) & ran(finishOrder) : POW( ((enabledColors) \/ (({cc}))))));
((cc) : (enabledColors));
(((enabledColors - ({cc}))) : (FIN((enabledColors - ({cc})))));
((((gameStarted) = (FALSE))) or ((2 <= card((enabledColors - ({cc})))) & ((color) : ((enabledColors - ({cc})))) & ran(finishOrder) : POW( (enabledColors - ({cc})))));
(2 <= card(enabledColors));
((color$1) : (enabledColors));
ran({}) : POW( enabledColors);
((gameStarted) = (TRUE));
not(((diceValue) = (0)));
((extraTurn) : (BOOL));
((finished) : (BOOL));
((((extraTurn) = (TRUE))) => (((finished) = (FALSE))));
((finished) = (TRUE));
not(((finished) = (TRUE)));
((extraTurn) = (TRUE));
not(((extraTurn) = (TRUE)));
((((finishOrder) <+ (({((card(finishOrder)) |-> (color))})))) : (((((0) .. ((numColors - 1)))) >+> (COLORS))));
((((finishOrder) <+ (({((card(finishOrder)) |-> (color))})))) : (FIN(((finishOrder) <+ (({((card(finishOrder)) |-> (color))}))))));
((((gameStarted) = (FALSE))) or ((2 <= card(enabledColors)) & ((color) : (enabledColors)) & ran(((finishOrder) <+ (({((card(finishOrder)) |-> (color))})))) : POW( enabledColors)));
((hasRoll) = (FALSE));
(card(finishOrder) +1 <= card(enabledColors));
((numJumps) = (min(SET(nn).(((nn) : (((1) .. (numColors)))) & (((colorsOrder )((((((colorsOrder)~ )(color) + nn)) mod (numColors)))) : ((enabledColors - ran(finishOrder))))))));
((((gameStarted) = (FALSE))) or ((2 <= card(enabledColors)) & (((colorsOrder )((((((colorsOrder)~ )(color) + numJumps)) mod (numColors)))) : (enabledColors)) & ran(finishOrder) : POW( enabledColors)));
((hasRoll) = (TRUE));
((dd) : (((1) .. (6))));
((dd) = (6));
(sixSequenceCount +1 <= 2);
not((sixSequenceCount +1 <= 2));
not(((dd) = (6)));
((dd) : (((0) .. (6))));
(((sixSequenceCount + 1)) : (((0) .. (2))));
((nn) : (((1) .. (numColors))));
"Operation is well defined";
((color) : (dom((colorsOrder)~)));
(((colorsOrder)~) : (((dom((colorsOrder)~)) +-> (ran((colorsOrder)~)))));
(0 <= (((colorsOrder)~ )(color) + nn));
(1 <= numColors);
(((((((colorsOrder)~ )(color) + nn)) mod (numColors))) : (dom(colorsOrder)));
((colorsOrder) : (((dom(colorsOrder)) +-> (ran(colorsOrder)))));
not(((SET(nn).(((nn) : (((1) .. (numColors)))) & (((colorsOrder )((((((colorsOrder)~ )(color) + nn)) mod (numColors)))) : ((enabledColors - ran(finishOrder)))))) = ({})));
((((SET(nn).(((nn) : (((1) .. (numColors)))) & (((colorsOrder )((((((colorsOrder)~ )(color) + nn)) mod (numColors)))) : ((enabledColors - ran(finishOrder)))))) /\ ((INTEGER - NATURAL)))) : (FIN(INTEGER)));
(0 <= (((colorsOrder)~ )(color) + numJumps));
(((((((colorsOrder)~ )(color) + numJumps)) mod (numColors))) : (dom(colorsOrder)))
END
&
THEORY EnumerateX
END
