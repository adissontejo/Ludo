THEORY ProofList IS
_f(1) & _f(2) & _f(12) & _f(13) & _f(81) & _f(82) & WellDefinedness_placement.2,(_f(114) => _f(117));
_f(1) & _f(2) & _f(12) & _f(13) & _f(81) & _f(82) & WellDefinedness_placement.1,(_f(114) => _f(131));
_f(1) & _f(2) & _f(12) & _f(13) & _f(125) & _f(126) & _f(51) & WellDefinedness_nextTurn.10,(_f(52) & _f(53) & _f(54) & _f(55) & _f(56) & _f(57) & _f(58) & _f(114) => _f(121));
_f(1) & _f(2) & _f(12) & _f(13) & _f(125) & _f(126) & _f(51) & WellDefinedness_nextTurn.9,(_f(52) & _f(53) & _f(54) & _f(55) & _f(56) & _f(57) & _f(58) & _f(114) => _f(130));
_f(1) & _f(2) & _f(12) & _f(13) & _f(125) & _f(126) & _f(51) & WellDefinedness_nextTurn.8,(_f(52) & _f(53) & _f(54) & _f(55) & _f(56) & _f(57) & _f(114) => _f(11));
_f(1) & _f(2) & _f(12) & _f(13) & _f(125) & _f(126) & _f(51) & WellDefinedness_nextTurn.7,(_f(52) & _f(53) & _f(54) & _f(55) & _f(56) & _f(57) & _f(114) => _f(129));
_f(1) & _f(2) & _f(12) & _f(13) & _f(125) & _f(126) & _f(51) & WellDefinedness_nextTurn.6,(_f(52) & _f(53) & _f(54) & _f(55) & _f(56) & _f(57) & _f(114) => _f(74));
_f(1) & _f(2) & _f(12) & _f(13) & _f(125) & _f(126) & _f(51) & WellDefinedness_nextTurn.5,(_f(52) & _f(53) & _f(54) & _f(55) & _f(56) & _f(57) & _f(114) => _f(128));
_f(1) & _f(2) & _f(12) & _f(13) & _f(125) & _f(126) & _f(51) & WellDefinedness_nextTurn.4,(_f(52) & _f(53) & _f(54) & _f(127) & _f(114) => _f(11));
_f(1) & _f(2) & _f(12) & _f(13) & _f(125) & _f(126) & _f(51) & WellDefinedness_nextTurn.3,(_f(52) & _f(53) & _f(54) & _f(127) & _f(114) => _f(75));
_f(1) & _f(2) & _f(12) & _f(13) & _f(125) & _f(126) & _f(51) & WellDefinedness_nextTurn.2,(_f(52) & _f(53) & _f(54) & _f(127) & _f(114) => _f(74));
_f(1) & _f(2) & _f(12) & _f(13) & _f(125) & _f(126) & _f(51) & WellDefinedness_nextTurn.1,(_f(52) & _f(53) & _f(54) & _f(127) & _f(114) => _f(73));
_f(1) & _f(2) & _f(12) & _f(13) & _f(119) & _f(22) & WellDefinedness_initGame.14,(_f(23) & _f(24) & _f(26) & _f(114) => _f(11));
_f(1) & _f(2) & _f(12) & _f(13) & _f(119) & _f(22) & WellDefinedness_initGame.13,(_f(23) & _f(24) & _f(26) & _f(114) => _f(35));
_f(1) & _f(2) & _f(12) & _f(13) & _f(119) & _f(22) & WellDefinedness_initGame.12,(_f(23) & _f(24) & _f(25) & _f(114) => _f(121));
_f(1) & _f(2) & _f(12) & _f(13) & _f(119) & _f(22) & WellDefinedness_initGame.11,(_f(23) & _f(24) & _f(25) & _f(114) => _f(124));
_f(1) & _f(2) & _f(12) & _f(13) & _f(119) & _f(22) & WellDefinedness_initGame.10,(_f(23) & _f(24) & _f(25) & _f(114) => _f(11));
_f(1) & _f(2) & _f(12) & _f(13) & _f(119) & _f(22) & WellDefinedness_initGame.9,(_f(23) & _f(24) & _f(25) & _f(114) => _f(123));
_f(1) & _f(2) & _f(12) & _f(13) & _f(119) & _f(22) & WellDefinedness_initGame.8,(_f(23) & _f(114) => _f(121));
_f(1) & _f(2) & _f(12) & _f(13) & _f(119) & _f(22) & WellDefinedness_initGame.7,(_f(23) & _f(114) => _f(122));
_f(1) & _f(2) & _f(12) & _f(13) & _f(119) & _f(22) & WellDefinedness_initGame.6,(_f(23) & _f(114) => _f(11));
_f(1) & _f(2) & _f(12) & _f(13) & _f(119) & _f(22) & WellDefinedness_initGame.5,(_f(23) & _f(114) => _f(35));
_f(1) & _f(2) & _f(12) & _f(13) & _f(119) & _f(22) & WellDefinedness_initGame.4,(_f(114) => _f(121));
_f(1) & _f(2) & _f(12) & _f(13) & _f(119) & _f(22) & WellDefinedness_initGame.3,(_f(114) => _f(120));
_f(1) & _f(2) & _f(12) & _f(13) & _f(119) & _f(22) & WellDefinedness_initGame.2,(_f(114) => _f(11));
_f(1) & _f(2) & _f(12) & _f(13) & _f(119) & _f(22) & WellDefinedness_initGame.1,(_f(114) => _f(10));
_f(1) & _f(2) & _f(12) & _f(13) & WellDefinedness_turnIndex.6,(_f(102) & _f(103) & _f(104) & _f(107) & _f(114) => _f(11));
_f(1) & _f(2) & _f(12) & _f(13) & WellDefinedness_turnIndex.5,(_f(102) & _f(103) & _f(104) & _f(107) & _f(114) => _f(35));
_f(1) & _f(2) & _f(12) & _f(13) & WellDefinedness_turnIndex.4,(_f(102) & _f(103) & _f(104) & _f(105) & _f(106) & _f(114) => _f(117));
_f(1) & _f(2) & _f(12) & _f(13) & WellDefinedness_turnIndex.3,(_f(102) & _f(103) & _f(104) & _f(105) & _f(106) & _f(114) => _f(116));
_f(1) & _f(2) & _f(12) & _f(13) & WellDefinedness_turnIndex.2,(_f(102) & _f(103) & _f(114) => _f(72));
_f(1) & _f(2) & _f(12) & _f(13) & WellDefinedness_turnIndex.1,(_f(102) & _f(103) & _f(114) => _f(118));
_f(1) & _f(2) & _f(12) & _f(13) & WellDefinedness_isColorFinished.4,(_f(92) & _f(93) & _f(96) & _f(114) => _f(11));
_f(1) & _f(2) & _f(12) & _f(13) & WellDefinedness_isColorFinished.3,(_f(92) & _f(93) & _f(96) & _f(114) => _f(35));
_f(1) & _f(2) & _f(12) & _f(13) & WellDefinedness_isColorFinished.2,(_f(92) & _f(93) & _f(94) & _f(95) & _f(114) => _f(117));
_f(1) & _f(2) & _f(12) & _f(13) & WellDefinedness_isColorFinished.1,(_f(92) & _f(93) & _f(94) & _f(95) & _f(114) => _f(116));
_f(1) & _f(2) & WellDefinednessLocalOperation_turnIndex.2,(_f(114) => _f(72));
_f(1) & _f(2) & WellDefinednessLocalOperation_turnIndex.1,(_f(114) => _f(115));
_f(1) & _f(2) & WellDefinednessInitialisation.2,(_f(113) => _f(11));
_f(1) & _f(2) & WellDefinednessInitialisation.1,(_f(113) => _f(10));
_f(1) & _f(2) & _f(12) & _f(84) & _f(85) & _f(86) & _f(87) & _f(88) & _f(89) & _f(90) & _f(91) & LocalOperation_turnIndex.7,(_f(102) & _f(103) & _f(104) & _f(107) & _f(34) => _f(112));
_f(1) & _f(2) & _f(12) & _f(84) & _f(85) & _f(86) & _f(87) & _f(88) & _f(89) & _f(90) & _f(91) & LocalOperation_turnIndex.6,(_f(102) & _f(103) & _f(104) & _f(105) & _f(106) & _f(32) => _f(33));
_f(1) & _f(2) & _f(12) & _f(84) & _f(85) & _f(86) & _f(87) & _f(88) & _f(89) & _f(90) & _f(91) & LocalOperation_turnIndex.5,(_f(102) & _f(103) & _f(104) & _f(30) => _f(31));
_f(1) & _f(2) & _f(12) & _f(84) & _f(85) & _f(86) & _f(87) & _f(88) & _f(89) & _f(90) & _f(91) & LocalOperation_turnIndex.4,(_f(102) & _f(103) & _f(104) & _f(105) & _f(106) & _f(28) => _f(111));
_f(1) & _f(2) & _f(12) & _f(84) & _f(85) & _f(86) & _f(87) & _f(88) & _f(89) & _f(90) & _f(91) & LocalOperation_turnIndex.3,(_f(102) & _f(103) & _f(104) & _f(105) & _f(106) & _f(28) => _f(110));
_f(1) & _f(2) & _f(12) & _f(84) & _f(85) & _f(86) & _f(87) & _f(88) & _f(89) & _f(90) & _f(91) & LocalOperation_turnIndex.2,(_f(61) => _f(109));
_f(1) & _f(2) & _f(12) & _f(84) & _f(85) & _f(86) & _f(87) & _f(88) & _f(89) & _f(90) & _f(91) & LocalOperation_turnIndex.1,(_f(61) => _f(108));
_f(1) & _f(2) & _f(12) & _f(84) & _f(85) & _f(86) & _f(87) & _f(88) & _f(89) & _f(90) & _f(91) & LocalOperation_isColorFinished.7,(_f(14) & _f(92) & _f(93) & _f(96) & _f(34) => _f(101));
_f(1) & _f(2) & _f(12) & _f(84) & _f(85) & _f(86) & _f(87) & _f(88) & _f(89) & _f(90) & _f(91) & LocalOperation_isColorFinished.6,(_f(14) & _f(92) & _f(93) & _f(94) & _f(95) & _f(32) => _f(33));
_f(1) & _f(2) & _f(12) & _f(84) & _f(85) & _f(86) & _f(87) & _f(88) & _f(89) & _f(90) & _f(91) & LocalOperation_isColorFinished.5,(_f(14) & _f(92) & _f(93) & _f(30) => _f(31));
_f(1) & _f(2) & _f(12) & _f(84) & _f(85) & _f(86) & _f(87) & _f(88) & _f(89) & _f(90) & _f(91) & LocalOperation_isColorFinished.4,(_f(14) & _f(92) & _f(93) & _f(94) & _f(95) & _f(28) => _f(100));
_f(1) & _f(2) & _f(12) & _f(84) & _f(85) & _f(86) & _f(87) & _f(88) & _f(89) & _f(90) & _f(91) & LocalOperation_isColorFinished.3,(_f(14) & _f(92) & _f(93) & _f(94) & _f(95) & _f(28) => _f(99));
_f(1) & _f(2) & _f(12) & _f(84) & _f(85) & _f(86) & _f(87) & _f(88) & _f(89) & _f(90) & _f(91) & LocalOperation_isColorFinished.2,(_f(14) & _f(61) => _f(98));
_f(1) & _f(2) & _f(12) & _f(84) & _f(85) & _f(86) & _f(87) & _f(88) & _f(89) & _f(90) & _f(91) & LocalOperation_isColorFinished.1,(_f(14) & _f(61) => _f(97));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_placement.1,(_f(81) & _f(82) & _f(3) => _f(83));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_rollDice.1,(_f(37) & _f(79) & _f(3) => _f(80));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.18,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(59) & _f(34) => _f(78));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.17,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(59) & _f(34) => _f(77));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.16,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(59) & _f(34) => _f(76));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.15,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(59) & _f(60) & _f(34) => _f(11));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.14,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(59) & _f(60) & _f(34) => _f(75));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.13,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(59) & _f(60) & _f(34) => _f(74));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.12,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(59) & _f(60) & _f(34) => _f(73));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.11,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(59) & _f(60) & _f(34) => _f(72));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.10,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(59) & _f(60) & _f(34) => _f(71));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.9,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(59) & _f(34) => _f(70));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.8,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(59) & _f(34) => _f(69));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.7,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(59) & _f(34) => _f(68));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.6,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(56) & _f(57) & _f(58) & _f(32) => _f(67));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.5,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(30) => _f(66));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.4,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(56) & _f(57) & _f(58) & _f(28) => _f(65));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.3,(_f(37) & _f(50) & _f(51) & _f(52) & _f(53) & _f(54) & _f(55) & _f(56) & _f(57) & _f(58) & _f(28) => _f(64));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.2,(_f(37) & _f(50) & _f(51) & _f(61) => _f(63));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_nextTurn.1,(_f(37) & _f(50) & _f(51) & _f(61) => _f(62));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_computeAction.4,(_f(37) & _f(38) & _f(39) & _f(40) & _f(41) & _f(42) & _f(3) => _f(49));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_computeAction.3,(_f(37) & _f(38) & _f(39) & _f(40) & _f(41) & _f(42) & _f(3) => _f(48));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_computeAction.2,(_f(37) & _f(38) & _f(39) & _f(40) & _f(41) & _f(42) & _f(3) => _f(47));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_computeAction.1,(_f(37) & _f(38) & _f(39) & _f(40) & _f(41) & _f(42) & _f(3) => _f(46));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_initGame.11,(_f(16) & _f(22) & _f(23) & _f(24) & _f(26) & _f(34) => _f(36));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_initGame.10,(_f(16) & _f(22) & _f(23) & _f(24) & _f(26) & _f(34) => _f(11));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_initGame.9,(_f(16) & _f(22) & _f(23) & _f(24) & _f(26) & _f(34) => _f(35));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_initGame.8,(_f(16) & _f(22) & _f(23) & _f(24) & _f(26) & _f(34) => _f(7));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_initGame.7,(_f(16) & _f(22) & _f(23) & _f(24) & _f(26) & _f(34) => _f(6));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_initGame.6,(_f(16) & _f(22) & _f(23) & _f(24) & _f(26) & _f(34) => _f(5));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_initGame.5,(_f(16) & _f(22) & _f(23) & _f(24) & _f(26) & _f(34) => _f(4));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_initGame.4,(_f(16) & _f(22) & _f(23) & _f(24) & _f(25) & _f(32) => _f(33));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_initGame.3,(_f(16) & _f(22) & _f(23) & _f(24) & _f(30) => _f(31));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_initGame.2,(_f(16) & _f(22) & _f(23) & _f(24) & _f(25) & _f(28) => _f(29));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_initGame.1,(_f(16) & _f(22) & _f(3) => _f(27));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_unpickColor.2,(_f(14) & _f(19) & _f(16) & _f(3) => _f(21));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_unpickColor.1,(_f(14) & _f(19) & _f(16) & _f(3) => _f(20));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_pickColor.2,(_f(14) & _f(15) & _f(16) & _f(3) => _f(18));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_pickColor.1,(_f(14) & _f(15) & _f(16) & _f(3) => _f(17));
_f(1) & _f(2) & Initialisation.8,(_f(3) => _f(11));
_f(1) & _f(2) & Initialisation.7,(_f(3) => _f(10));
_f(1) & _f(2) & Initialisation.6,(_f(3) => _f(9));
_f(1) & _f(2) & Initialisation.5,(_f(3) => _f(8));
_f(1) & _f(2) & Initialisation.4,(_f(3) => _f(7));
_f(1) & _f(2) & Initialisation.3,(_f(3) => _f(6));
_f(1) & _f(2) & Initialisation.2,(_f(3) => _f(5));
_f(1) & _f(2) & Initialisation.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
COLORS: FIN(INTEGER) & not(COLORS = {}) & PIECES: FIN(INTEGER) & not(PIECES = {}) & ((numPiecesByColor) = (4)) & ((numExternal) = (52)) & ((numInternal) = (6)) & ((numColors) = (4)) & ((card(COLORS)) = (numColors)) & ((numPieces) : (NAT)) & ((numPieces) = ((numPiecesByColor * numColors))) & ((diceOptions) = (((1) .. (6)))) & stars : POW( ((0) .. ((numExternal - 1)))) & ((stars) = (({8}\/{21}\/{34}\/{47}))) & startPoint : COLORS +-> ((0) .. (51)) & startPoint : COLORS --> ((0) .. (51)) & startPoint~ : ((0) .. (51)) +-> COLORS & ((startPoint) : (((COLORS) >-> (((0) .. (51)))))) & ((card(PIECES)) = ((numPiecesByColor * numColors))) & colorsOrder : ((0) .. (3)) +-> COLORS & colorsOrder : ((0) .. (3)) >+> COLORS & colorsOrder : ((0) .. (3)) +->> COLORS & colorsOrder : ((0) .. (3)) --> COLORS & dom(colorsOrder) = ((0) .. (3)) & colorsOrder~ : COLORS +-> ((0) .. (3)) & ran(colorsOrder) = COLORS & ((colorsOrder) : (((((0) .. (3))) >->> (COLORS)))) & colorOf : PIECES +-> COLORS & colorOf : PIECES --> COLORS & colorOf : PIECES +->> COLORS & dom(colorOf) = PIECES & ran(colorOf) = COLORS & ((colorOf) : (((PIECES) -->> (COLORS)))) & !(cc).(((((cc) : (COLORS))) => (((((colorOf)~ )[({cc})]) : (FIN(PIECES))) & ((card(((colorOf)~ )[({cc})])) = (numPiecesByColor))))) & piecesOrder : ((0) .. (15)) +-> PIECES & piecesOrder : ((0) .. (15)) >+> PIECES & piecesOrder : ((0) .. (15)) +->> PIECES & piecesOrder : ((0) .. (15)) --> PIECES & dom(piecesOrder) = ((0) .. (15)) & piecesOrder~ : PIECES +-> ((0) .. (15)) & ran(piecesOrder) = PIECES & ((piecesOrder) : (((((0) .. (15))) >->> (PIECES))));
"Refinement is correct";
((colorsOrder) : (((((0) .. (3))) --> (COLORS))));
((0) : (((0) .. (4))));
((((((0) .. ((0 - 1)))) <| (colorsOrder))) = ({}));
((0) = (card({})));
(((COLORS * ({FALSE}))) : (((COLORS) --> (BOOL))));
((dom((((COLORS * ({FALSE}))) |> (({TRUE}))))) = ({}));
((0) : (dom(colorsOrder)));
((colorsOrder) : (((dom(colorsOrder)) +-> (ran(colorsOrder)))));
((gameStarted$1) : (BOOL)) & ((enabledColors) : (POW(COLORS))) & ((enabledColors) : (FIN(enabledColors))) & ((color$1) : (COLORS)) & ((hasRoll$1) : (BOOL)) & ((diceValue$1) : (((0) .. (6)))) & ((sixSequenceCount$1) : (((0) .. (2)))) & finishOrder : ((0) .. ((numColors - 1))) +-> COLORS & finishOrder~ : COLORS +-> ((0) .. ((numColors - 1))) & ((finishOrder) : (((((0) .. ((numColors - 1)))) >+> (COLORS)))) & ((finishOrder) : (FIN(finishOrder))) & ((dom(finishOrder)) = (((0) .. ((card(finishOrder) - 1))))) & ((((gameStarted$1) = (FALSE))) or ((2 <= card(enabledColors)) & ((color$1) : (enabledColors)) & ran(finishOrder) : POW( enabledColors)));
((gameStarted) = (gameStarted$1)) & ((color) = (color$1)) & ((hasRoll) = (hasRoll$1)) & ((diceValue) = (diceValue$1)) & ((sixSequenceCount) = (sixSequenceCount$1)) & finishList$1 : ((0) .. (3)) +-> COLORS & dom(finishList$1) = ((0) .. (3)) & ((finishList$1) : (((((0) .. (3))) --> (COLORS)))) & ((finishCount$1) : (((0) .. (4)))) & ((((((0) .. ((finishCount$1 - 1)))) <| (finishList$1))) = (finishOrder)) & ((finishCount$1) = (card(finishOrder))) & colorEnabled$1 : COLORS +-> BOOL & dom(colorEnabled$1) = COLORS & ((colorEnabled$1) : (((COLORS) --> (BOOL)))) & ((dom(((colorEnabled$1) |> (({TRUE}))))) = (enabledColors));
((cc) : (COLORS));
not(((cc) : (enabledColors)));
((gameStarted$1) = (FALSE));
((((colorEnabled$1) <+ (({((cc) |-> (TRUE))})))) : (((COLORS) --> (BOOL))));
((dom(((((colorEnabled$1) <+ (({((cc) |-> (TRUE))})))) |> (({TRUE}))))) = (((enabledColors) \/ (({cc})))));
((cc) : (enabledColors));
((((colorEnabled$1) <+ (({((cc) |-> (FALSE))})))) : (((COLORS) --> (BOOL))));
((dom(((((colorEnabled$1) <+ (({((cc) |-> (FALSE))})))) |> (({TRUE}))))) = ((enabledColors - ({cc}))));
(2 <= card(enabledColors));
((ii) : (((0) .. ((numColors - 1)))));
((isEnabled) = ((colorEnabled$1 )((colorsOrder )(ii))));
((isEnabled) = (FALSE));
not(((isEnabled) = (FALSE)));
((0) : (((0) .. ((numColors - 1)))));
"Loop invariant is preserved";
(((ii + 1)) : (((0) .. ((numColors - 1)))));
"Loop variant is positive";
(0 <= (numColors - ii));
"Variant is decreasing";
((numColors - (ii + 1)) +1 <= (numColors - ii));
"End of loop";
((ii) : (dom(colorsOrder)));
(((colorsOrder )(ii)) : (enabledColors));
((gameStarted$1) = (TRUE));
not(((diceValue$1) = (0)));
((extraTurn) : (BOOL));
((finished) : (BOOL));
((((extraTurn) = (TRUE))) => (((finished) = (FALSE))));
((finished) = (TRUE));
not(((finished) = (TRUE)));
((extraTurn) = (TRUE));
not(((extraTurn) = (TRUE)));
((((finishList$1) <+ (({((finishCount$1) |-> (color$1))})))) : (((((0) .. (3))) --> (COLORS))));
(((finishCount$1 + 1)) : (((0) .. (4))));
((((((0) .. (((finishCount$1 + 1) - 1)))) <| (((finishList$1) <+ (({((finishCount$1) |-> (color$1))})))))) = (((finishOrder) <+ (({((card(finishOrder)) |-> (color$1))})))));
(((finishCount$1 + 1)) = (card(((finishOrder) <+ (({((card(finishOrder)) |-> (color$1))}))))));
((hasRoll$1) = (FALSE));
(card(finishOrder) +1 <= card(enabledColors));
(numJumps <= numColors);
((enabled) : (BOOL));
((isFinished) : (BOOL));
((SET(nn).(((nn) : (((1) .. ((numJumps - 1))))) & (((colorsOrder )((((((colorsOrder)~ )(color$1) + nn)) mod (numColors)))) : ((enabledColors - ran(finishOrder)))))) = ({}));
(numJumps +1 <= numColors);
((((enabled) = (FALSE))) or (((isFinished) = (TRUE))));
(((colorsOrder )((((((colorsOrder)~ )(color$1) + (numJumps + 1))) mod (numColors)))) : (COLORS));
not((numJumps +1 <= numColors) & ((((enabled) = (FALSE))) or (((isFinished) = (TRUE)))));
((nn) : (((1) .. (numColors))));
"Loop initialisation";
(0 <= numColors);
((SET(nn).(((nn) : (((1) .. ((0 - 1))))) & (((colorsOrder )((((((colorsOrder)~ )(color$1) + nn)) mod (numColors)))) : ((enabledColors - ran(finishOrder)))))) = ({}));
((numJumps + 1) <= numColors);
((SET(nn).(((nn) : (((1) .. (((numJumps + 1) - 1))))) & (((colorsOrder )((((((colorsOrder)~ )(color$1) + nn)) mod (numColors)))) : ((enabledColors - ran(finishOrder)))))) = ({}));
(0 <= (numColors - numJumps));
((numColors - (numJumps + 1)) +1 <= (numColors - numJumps));
((TRUE) = (hasRoll$1));
((0) = (diceValue$1));
((0) = (sixSequenceCount$1));
((color$1) : (dom((colorsOrder)~)));
(((colorsOrder)~) : (((dom((colorsOrder)~)) +-> (ran((colorsOrder)~)))));
(0 <= (((colorsOrder)~ )(color$1) + nn));
(1 <= numColors);
(((((((colorsOrder)~ )(color$1) + nn)) mod (numColors))) : (dom(colorsOrder)));
not(((SET(nn).(((nn) : (((1) .. (numColors)))) & (((colorsOrder )((((((colorsOrder)~ )(color$1) + nn)) mod (numColors)))) : ((enabledColors - ran(finishOrder)))))) = ({})));
((((SET(nn).(((nn) : (((1) .. (numColors)))) & (((colorsOrder )((((((colorsOrder)~ )(color$1) + nn)) mod (numColors)))) : ((enabledColors - ran(finishOrder)))))) /\ ((INTEGER - NATURAL)))) : (FIN(INTEGER)));
(((colorsOrder )((((((colorsOrder)~ )(color$1) + min(SET(nn).(((nn) : (((1) .. (numColors)))) & (((colorsOrder )((((((colorsOrder)~ )(color$1) + nn)) mod (numColors)))) : ((enabledColors - ran(finishOrder)))))))) mod (numColors)))) = (color$1));
((hasRoll$1) = (TRUE));
#(dd$1).(((dd$1) : (((1) .. (6)))) & ((((dd$1) = (6))) => ((((sixSequenceCount$1 +1 <= 2)) => (((hasRoll$1) = (FALSE)) & ((dd$1) = (5)) & (((sixSequenceCount$1 + 1)) = (sixSequenceCount$1)) & ((finishList$1) : (((((0) .. (3))) --> (COLORS)))) & ((finishCount$1) : (((0) .. (4)))) & ((((((0) .. ((finishCount$1 - 1)))) <| (finishList$1))) = (finishOrder)) & ((finishCount$1) = (card(finishOrder))) & ((colorEnabled$1) : (((COLORS) --> (BOOL)))) & ((dom(((colorEnabled$1) |> (({TRUE}))))) = (enabledColors)) & ((5) = (dd$1)))) & (sixSequenceCount$1 +1 <= 2))) & ((not(((dd$1) = (6)))) => (((dd$1) = (5)) & ((finishList$1) : (((((0) .. (3))) --> (COLORS)))) & ((finishCount$1) : (((0) .. (4)))) & ((((((0) .. ((finishCount$1 - 1)))) <| (finishList$1))) = (finishOrder)) & ((finishCount$1) = (card(finishOrder))) & ((colorEnabled$1) : (((COLORS) --> (BOOL)))) & ((dom(((colorEnabled$1) |> (({TRUE}))))) = (enabledColors)) & ((5) = (dd$1)))));
((nn) : (NAT));
((nn) : (dom(finishOrder)));
(((finishList$1 )(nn)) = ((finishOrder )(nn)));
((gameStarted) = (gameStarted$1));
((colorEnabled) = (colorEnabled$1));
((color) = (color$1));
((hasRoll) = (hasRoll$1));
((diceValue) = (diceValue$1));
((sixSequenceCount) = (sixSequenceCount$1));
((finishList) = (finishList$1));
((finishCount) = (finishCount$1));
((ii) : (((0) .. (finishCount$1))));
((((bb) = (TRUE))) => (((cc) : ((finishList$1 )[((0) .. ((ii - 1)))])))) & ((((cc) : ((finishList$1 )[((0) .. ((ii - 1)))]))) => (((bb) = (TRUE))));
(ii +1 <= finishCount$1);
((bb) = (FALSE));
not((ii +1 <= finishCount$1) & ((bb) = (FALSE)));
((0) : (((0) .. (finishCount$1))));
not(((cc) : ((finishList$1 )[((0) .. ((0 - 1)))])));
(((ii + 1)) : (((0) .. (finishCount$1))));
(((((finishList$1 )(ii)) = (cc))) => (((cc) : ((finishList$1 )[((0) .. (((ii + 1) - 1)))])))) & ((((cc) : ((finishList$1 )[((0) .. (((ii + 1) - 1)))]))) => ((((finishList$1 )(ii)) = (cc))));
((bb) = (bool(((cc) : (ran(finishList$1))))));
((ii) : (((0) .. (numColors))));
((isColorTurn) : (BOOL));
((((isColorTurn) = (TRUE))) => (((nn) = (((colorsOrder)~ )(color$2))))) & ((((nn) = (((colorsOrder)~ )(color$2)))) => (((isColorTurn) = (TRUE))));
(ii +1 <= numColors);
((isColorTurn) = (FALSE));
not((ii +1 <= numColors) & ((isColorTurn) = (FALSE)));
((0) : (((0) .. (numColors))));
not(((nn$1) = (((colorsOrder)~ )(color$2))));
(((ii + 1)) : (((0) .. (numColors))));
((ii) = (((colorsOrder)~ )((finishList$1 )(ii))));
((nn) = (((colorsOrder)~ )(color$1)));
"Initialisation is well defined";
"Operation is well defined";
((color) : (dom((colorsOrder)~)));
((ii) : (dom(finishList$1)));
((finishList$1) : (((dom(finishList$1)) +-> (ran(finishList$1)))));
((color$2) : (dom((colorsOrder)~)));
((gameStarted) = (FALSE));
(((colorsOrder )(0)) : (dom(colorEnabled$1)));
((colorEnabled$1) : (((dom(colorEnabled$1)) +-> (ran(colorEnabled$1)))));
(((colorsOrder )(ii)) : (dom(colorEnabled$1)));
(((ii + 1)) : (dom(colorsOrder)));
(((colorsOrder )((ii + 1))) : (dom(colorEnabled$1)));
((gameStarted) = (TRUE));
((hasRoll) = (FALSE));
((nn) : (((1) .. ((numJumps - 1)))));
(0 <= (((colorsOrder)~ )(color$1) + (numJumps + 1)));
(((((((colorsOrder)~ )(color$1) + (numJumps + 1))) mod (numColors))) : (dom(colorsOrder)));
(((colorsOrder )((((((colorsOrder)~ )(color$1) + (numJumps + 1))) mod (numColors)))) : (dom(colorEnabled$1)));
((nn) : (dom(finishList$1)))
END
&
THEORY EnumerateX
END
