THEORY ProofList IS
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & WellDefinedness_isFinished.4,(_f(108) & _f(109) & _f(110) & _f(111) & _f(162) => _f(164));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & WellDefinedness_isFinished.3,(_f(108) & _f(109) & _f(110) & _f(111) & _f(162) => _f(173));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & WellDefinedness_isFinished.2,(_f(108) & _f(109) & _f(110) & _f(111) & _f(162) => _f(172));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & WellDefinedness_isFinished.1,(_f(108) & _f(109) & _f(110) & _f(111) & _f(162) => _f(171));
_f(1) & _f(2) & _f(142) & _f(143) & _f(144) & _f(145) & _f(146) & _f(147) & _f(148) & _f(149) & _f(150) & _f(151) & _f(152) & _f(153) & _f(154) & _f(155) & _f(156) & _f(157) & _f(158) & _f(159) & _f(136) & _f(137) & WellDefinednessLocalOperation_isPathFree.4,(_f(138) & _f(139) & _f(140) & _f(162) => _f(170));
_f(1) & _f(2) & _f(142) & _f(143) & _f(144) & _f(145) & _f(146) & _f(147) & _f(148) & _f(149) & _f(150) & _f(151) & _f(152) & _f(153) & _f(154) & _f(155) & _f(156) & _f(157) & _f(158) & _f(159) & _f(136) & _f(137) & WellDefinednessLocalOperation_isPathFree.3,(_f(138) & _f(139) & _f(162) => _f(169));
_f(1) & _f(2) & _f(142) & _f(143) & _f(144) & _f(145) & _f(146) & _f(147) & _f(148) & _f(149) & _f(150) & _f(151) & _f(152) & _f(153) & _f(154) & _f(155) & _f(156) & _f(157) & _f(158) & _f(159) & _f(136) & _f(137) & WellDefinednessLocalOperation_isPathFree.2,(_f(138) & _f(139) & _f(162) => _f(77));
_f(1) & _f(2) & _f(142) & _f(143) & _f(144) & _f(145) & _f(146) & _f(147) & _f(148) & _f(149) & _f(150) & _f(151) & _f(152) & _f(153) & _f(154) & _f(155) & _f(156) & _f(157) & _f(158) & _f(159) & _f(136) & _f(137) & WellDefinednessLocalOperation_isPathFree.1,(_f(138) & _f(139) & _f(162) => _f(168));
_f(1) & _f(2) & _f(142) & _f(143) & _f(144) & _f(145) & _f(146) & _f(147) & _f(148) & _f(149) & _f(150) & _f(151) & _f(152) & _f(153) & _f(154) & _f(155) & _f(156) & _f(157) & _f(158) & _f(159) & _f(25) & WellDefinednessLocalOperation_canFree.5,(_f(160) & _f(161) & _f(162) => _f(167));
_f(1) & _f(2) & _f(142) & _f(143) & _f(144) & _f(145) & _f(146) & _f(147) & _f(148) & _f(149) & _f(150) & _f(151) & _f(152) & _f(153) & _f(154) & _f(155) & _f(156) & _f(157) & _f(158) & _f(159) & _f(25) & WellDefinednessLocalOperation_canFree.4,(_f(160) & _f(161) & _f(162) => _f(166));
_f(1) & _f(2) & _f(142) & _f(143) & _f(144) & _f(145) & _f(146) & _f(147) & _f(148) & _f(149) & _f(150) & _f(151) & _f(152) & _f(153) & _f(154) & _f(155) & _f(156) & _f(157) & _f(158) & _f(159) & _f(25) & WellDefinednessLocalOperation_canFree.3,(_f(160) & _f(161) & _f(162) => _f(165));
_f(1) & _f(2) & _f(142) & _f(143) & _f(144) & _f(145) & _f(146) & _f(147) & _f(148) & _f(149) & _f(150) & _f(151) & _f(152) & _f(153) & _f(154) & _f(155) & _f(156) & _f(157) & _f(158) & _f(159) & _f(25) & WellDefinednessLocalOperation_canFree.2,(_f(160) & _f(161) & _f(162) => _f(164));
_f(1) & _f(2) & _f(142) & _f(143) & _f(144) & _f(145) & _f(146) & _f(147) & _f(148) & _f(149) & _f(150) & _f(151) & _f(152) & _f(153) & _f(154) & _f(155) & _f(156) & _f(157) & _f(158) & _f(159) & _f(25) & WellDefinednessLocalOperation_canFree.1,(_f(160) & _f(161) & _f(162) => _f(163));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isPathFree.1,(_f(136) & _f(137) & _f(138) & _f(139) & _f(140) & _f(9) => _f(141));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_canFree.3,(_f(25) & _f(9) => _f(29));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_canFree.2,(_f(25) & _f(9) => _f(28));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_canFree.1,(_f(25) & _f(9) => _f(27));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.22,(_f(107) & _f(108) & _f(109) & _f(122) & _f(134) => _f(135));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.21,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(117) & _f(121) & _f(116) & _f(132) => _f(133));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.20,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(117) & _f(121) & _f(114) & _f(115) & _f(132) => _f(133));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.19,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(117) & _f(118) & _f(120) & _f(132) => _f(133));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.18,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(117) & _f(118) & _f(114) & _f(119) & _f(132) => _f(133));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.17,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(113) & _f(116) & _f(132) => _f(133));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.16,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(113) & _f(114) & _f(115) & _f(132) => _f(133));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.15,(_f(107) & _f(108) & _f(109) & _f(130) => _f(131));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.14,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(117) & _f(121) & _f(116) & _f(126) => _f(129));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.13,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(117) & _f(121) & _f(116) & _f(126) => _f(127));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.12,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(117) & _f(121) & _f(114) & _f(115) & _f(126) => _f(128));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.11,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(117) & _f(121) & _f(114) & _f(115) & _f(126) => _f(127));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.10,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(117) & _f(118) & _f(120) & _f(126) => _f(129));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.9,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(117) & _f(118) & _f(120) & _f(126) => _f(127));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.8,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(117) & _f(118) & _f(114) & _f(119) & _f(126) => _f(128));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.7,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(117) & _f(118) & _f(114) & _f(119) & _f(126) => _f(127));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.6,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(113) & _f(116) & _f(126) => _f(129));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.5,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(113) & _f(116) & _f(126) => _f(127));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.4,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(113) & _f(114) & _f(115) & _f(126) => _f(128));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.3,(_f(107) & _f(108) & _f(109) & _f(110) & _f(111) & _f(112) & _f(113) & _f(114) & _f(115) & _f(126) => _f(127));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.2,(_f(107) & _f(123) => _f(125));
_f(1) & _f(2) & _f(3) & _f(4) & _f(97) & _f(98) & _f(99) & _f(100) & _f(101) & _f(102) & _f(103) & _f(104) & _f(105) & _f(106) & LocalOperation_isFinished.1,(_f(107) & _f(123) => _f(124));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_walk.6,(_f(25) & _f(94) & _f(9) => _f(96));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_walk.5,(_f(25) & _f(64) & _f(9) => _f(95));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_walk.4,(_f(25) & _f(9) => _f(61));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_walk.3,(_f(25) & _f(9) => _f(30));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_walk.2,(_f(25) & _f(9) => _f(26));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_walk.1,(_f(25) & _f(9) => _f(24));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_nextTurn.4,(_f(9) => _f(46));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_nextTurn.3,(_f(9) => _f(36));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_nextTurn.2,(_f(9) => _f(45));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_nextTurn.1,(_f(9) => _f(24));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_rollDice.3,(_f(9) => _f(36));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_rollDice.2,(_f(9) => _f(35));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_rollDice.1,(_f(9) => _f(24));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_free.5,(_f(25) & _f(9) => _f(29));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_free.4,(_f(25) & _f(9) => _f(28));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_free.3,(_f(25) & _f(9) => _f(27));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_free.2,(_f(25) & _f(9) => _f(26));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_free.1,(_f(25) & _f(9) => _f(24));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_initGame.2,(_f(9) => _f(13));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_initGame.1,(_f(9) => _f(8));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_unpickColor.2,(_f(6) & _f(9) => _f(8));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_unpickColor.1,(_f(6) & _f(9) => _f(7));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_pickColor.2,(_f(6) & _f(9) => _f(8));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pre_pickColor.1,(_f(6) & _f(9) => _f(7));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_finishGame.2,(_f(24) & _f(91) & _f(9) => _f(93));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_finishGame.1,(_f(24) & _f(91) & _f(9) => _f(92));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_getTurn.1,(_f(24) & _f(89) & _f(9) => _f(90));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_getBoard.2,(_f(24) & _f(9) => _f(88));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_getBoard.1,(_f(24) & _f(9) => _f(87));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_getDiceValue.1,(_f(24) & _f(30) & _f(9) => _f(86));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.38,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(74) & _f(73) & _f(9) => _f(20));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.37,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(74) & _f(73) & _f(9) => _f(85));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.36,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(74) & _f(73) & _f(9) => _f(81));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.35,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(74) & _f(70) & _f(72) & _f(9) => _f(20));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.34,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(74) & _f(70) & _f(72) & _f(9) => _f(19));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.33,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(74) & _f(70) & _f(72) & _f(9) => _f(85));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.32,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(74) & _f(70) & _f(72) & _f(9) => _f(81));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.31,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(74) & _f(70) & _f(71) & _f(9) => _f(84));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.30,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(74) & _f(70) & _f(71) & _f(9) => _f(20));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.29,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(74) & _f(70) & _f(71) & _f(9) => _f(83));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.28,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(74) & _f(70) & _f(71) & _f(9) => _f(85));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.27,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(74) & _f(70) & _f(71) & _f(9) => _f(81));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.26,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(64) & _f(73) & _f(9) => _f(20));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.25,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(64) & _f(73) & _f(9) => _f(82));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.24,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(64) & _f(73) & _f(9) => _f(81));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.23,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(64) & _f(70) & _f(72) & _f(9) => _f(20));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.22,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(64) & _f(70) & _f(72) & _f(9) => _f(19));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.21,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(64) & _f(70) & _f(72) & _f(9) => _f(82));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.20,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(64) & _f(70) & _f(72) & _f(9) => _f(81));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.19,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(64) & _f(70) & _f(71) & _f(9) => _f(84));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.18,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(64) & _f(70) & _f(71) & _f(9) => _f(20));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.17,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(64) & _f(70) & _f(71) & _f(9) => _f(83));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.16,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(64) & _f(70) & _f(71) & _f(9) => _f(82));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.15,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(69) & _f(64) & _f(70) & _f(71) & _f(9) => _f(81));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.14,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(64) & _f(65) & _f(68) & _f(9) => _f(20));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.13,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(64) & _f(65) & _f(68) & _f(9) => _f(80));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.12,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(64) & _f(65) & _f(68) & _f(66) & _f(67) & _f(9) => _f(19));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.11,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(64) & _f(65) & _f(68) & _f(66) & _f(67) & _f(9) => _f(80));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.10,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(64) & _f(65) & _f(66) & _f(67) & _f(68) & _f(9) => _f(20));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.9,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(64) & _f(65) & _f(66) & _f(67) & _f(68) & _f(9) => _f(79));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.8,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(64) & _f(65) & _f(66) & _f(67) & _f(68) & _f(9) => _f(78));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.7,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(64) & _f(65) & _f(66) & _f(67) & _f(9) => _f(20));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.6,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(64) & _f(65) & _f(66) & _f(67) & _f(9) => _f(19));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.5,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(64) & _f(65) & _f(66) & _f(67) & _f(9) => _f(79));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.4,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(64) & _f(65) & _f(66) & _f(67) & _f(9) => _f(78));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.3,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(64) & _f(65) & _f(9) => _f(77));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.2,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(64) & _f(65) & _f(9) => _f(76));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_walk.1,(_f(24) & _f(25) & _f(26) & _f(30) & _f(61) & _f(62) & _f(63) & _f(64) & _f(65) & _f(9) => _f(75));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.15,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(9) => _f(60));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.14,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(9) => _f(59));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.13,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(9) => _f(58));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.12,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(48) & _f(9) => _f(57));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.11,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(48) & _f(9) => _f(56));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.10,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(48) & _f(9) => _f(55));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.9,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(48) & _f(9) => _f(54));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.8,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(48) & _f(9) => _f(53));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.7,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(48) & _f(9) => _f(52));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.6,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(48) & _f(9) => _f(51));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.5,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(48) & _f(9) => _f(50));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.4,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(48) & _f(9) => _f(49));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.3,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(9) => _f(21));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.2,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(9) => _f(20));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_nextTurn.1,(_f(24) & _f(45) & _f(36) & _f(46) & _f(47) & _f(9) => _f(19));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_rollDice.3,(_f(24) & _f(35) & _f(36) & _f(37) & _f(41) & _f(9) => _f(44));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_rollDice.2,(_f(24) & _f(35) & _f(36) & _f(37) & _f(38) & _f(40) & _f(9) => _f(43));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_rollDice.1,(_f(24) & _f(35) & _f(36) & _f(37) & _f(38) & _f(39) & _f(9) => _f(42));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_free.4,(_f(24) & _f(25) & _f(26) & _f(27) & _f(28) & _f(29) & _f(30) & _f(31) & _f(9) => _f(20));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_free.3,(_f(24) & _f(25) & _f(26) & _f(27) & _f(28) & _f(29) & _f(30) & _f(31) & _f(9) => _f(34));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_free.2,(_f(24) & _f(25) & _f(26) & _f(27) & _f(28) & _f(29) & _f(30) & _f(31) & _f(9) => _f(33));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_free.1,(_f(24) & _f(25) & _f(26) & _f(27) & _f(28) & _f(29) & _f(32) => _f(30));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_initGame.9,(_f(8) & _f(13) & _f(14) & _f(9) => _f(23));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_initGame.8,(_f(8) & _f(13) & _f(14) & _f(9) => _f(22));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_initGame.7,(_f(8) & _f(13) & _f(14) & _f(9) => _f(21));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_initGame.6,(_f(8) & _f(13) & _f(14) & _f(9) => _f(20));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_initGame.5,(_f(8) & _f(13) & _f(14) & _f(9) => _f(19));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_initGame.4,(_f(8) & _f(13) & _f(14) & _f(9) => _f(18));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_initGame.3,(_f(8) & _f(13) & _f(14) & _f(9) => _f(17));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_initGame.2,(_f(8) & _f(13) & _f(14) & _f(9) => _f(16));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_initGame.1,(_f(8) & _f(13) & _f(14) & _f(9) => _f(15));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_unpickColor.1,(_f(6) & _f(11) & _f(8) & _f(9) => _f(12));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Operation_pickColor.1,(_f(6) & _f(7) & _f(8) & _f(9) => _f(10))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
COLORS: FIN(INTEGER) & not(COLORS = {}) & PIECES: FIN(INTEGER) & not(PIECES = {}) & ((numPiecesByColor) = (4)) & ((numExternal) = (52)) & ((numInternal) = (6)) & ((numColors) = (4)) & ((card(COLORS)) = (numColors)) & ((numPieces) : (NAT)) & ((numPieces) = ((numPiecesByColor * numColors))) & ((diceOptions) = (((1) .. (6)))) & stars : POW( ((0) .. ((numExternal - 1)))) & ((stars) = (({8}\/{21}\/{34}\/{47}))) & startPoint : COLORS +-> ((0) .. (51)) & startPoint : COLORS --> ((0) .. (51)) & startPoint~ : ((0) .. (51)) +-> COLORS & ((startPoint) : (((COLORS) >-> (((0) .. (51)))))) & ((card(PIECES)) = ((numPiecesByColor * numColors))) & colorsOrder : ((0) .. (3)) +-> COLORS & colorsOrder : ((0) .. (3)) >+> COLORS & colorsOrder : ((0) .. (3)) +->> COLORS & colorsOrder : ((0) .. (3)) --> COLORS & dom(colorsOrder) = ((0) .. (3)) & colorsOrder~ : COLORS +-> ((0) .. (3)) & ran(colorsOrder) = COLORS & ((colorsOrder) : (((((0) .. (3))) >->> (COLORS)))) & colorOf : PIECES +-> COLORS & colorOf : PIECES --> COLORS & colorOf : PIECES +->> COLORS & dom(colorOf) = PIECES & ran(colorOf) = COLORS & ((colorOf) : (((PIECES) -->> (COLORS)))) & !(cc).(((((cc) : (COLORS))) => (((((colorOf)~ )[({cc})]) : (FIN(PIECES))) & ((card(((colorOf)~ )[({cc})])) = (numPiecesByColor))))) & piecesOrder : ((0) .. (15)) +-> PIECES & piecesOrder : ((0) .. (15)) >+> PIECES & piecesOrder : ((0) .. (15)) +->> PIECES & piecesOrder : ((0) .. (15)) --> PIECES & dom(piecesOrder) = ((0) .. (15)) & piecesOrder~ : PIECES +-> ((0) .. (15)) & ran(piecesOrder) = PIECES & ((piecesOrder) : (((((0) .. (15))) >->> (PIECES))));
((board.lockedPieces$1) : (POW(PIECES))) & ((board.externalPos$1) : (((PIECES) +-> (((0) .. ((numExternal - 1))))))) & ((board.internalPos$1) : (((PIECES) +-> (((0) .. ((numInternal - 1))))))) & ((((dom(board.externalPos$1)) /\ (dom(board.internalPos$1)))) = ({})) & ((((dom(board.externalPos$1)) /\ (board.lockedPieces$1))) = ({})) & ((((dom(board.internalPos$1)) /\ (board.lockedPieces$1))) = ({})) & ((((((dom(board.externalPos$1)) \/ (dom(board.internalPos$1)))) \/ (board.lockedPieces$1))) = (PIECES)) & !(nn).(((((nn) : (((0) .. ((numExternal - 1)))))) => ((card(((board.externalPos$1) |> (({nn})))) <= 2) & ((not(((nn) : (((stars) \/ (ran(startPoint))))))) => ((card(((((board.externalPos$1)~) ; (colorOf)) )[({nn})]) <= 1)))))) & ((turn.gameStarted$1) : (BOOL)) & ((turn.enabledColors$1) : (POW(COLORS))) & ((turn.enabledColors$1) : (FIN(turn.enabledColors$1))) & ((turn.color$1) : (COLORS)) & ((turn.hasRoll$1) : (BOOL)) & ((turn.diceValue$1) : (((0) .. (6)))) & ((turn.sixSequenceCount$1) : (((0) .. (2)))) & turn.finishOrder$1 : ((0) .. ((numColors - 1))) +-> COLORS & turn.finishOrder$1~ : COLORS +-> ((0) .. ((numColors - 1))) & ((turn.finishOrder$1) : (((((0) .. ((numColors - 1)))) >+> (COLORS)))) & ((turn.finishOrder$1) : (FIN(turn.finishOrder$1))) & ((((turn.gameStarted$1) = (FALSE))) or ((2 <= card(turn.enabledColors$1)) & ((turn.color$1) : (turn.enabledColors$1)) & ran(turn.finishOrder$1) : POW( turn.enabledColors$1)));
!(cc).(((((cc) : (ran(turn.finishOrder$1)))) => (((colorOf)~ )[({cc})] : POW( ((board.internalPos$1)~ )[({(numInternal - 1)})])))) & !(pp).(((((pp) : (PIECES))) => (((not((((colorOf )(pp)) : (turn.enabledColors$1)))) => (((pp) : (board.lockedPieces$1))))))) & ((board.lockedPieces) : (POW(PIECES))) & ((board.externalPos) : (((PIECES) +-> (((0) .. ((numExternal - 1))))))) & ((board.internalPos) : (((PIECES) +-> (((0) .. ((numInternal - 1))))))) & ((((dom(board.externalPos)) /\ (dom(board.internalPos)))) = ({})) & ((((dom(board.externalPos)) /\ (board.lockedPieces))) = ({})) & ((((dom(board.internalPos)) /\ (board.lockedPieces))) = ({})) & ((((((dom(board.externalPos)) \/ (dom(board.internalPos)))) \/ (board.lockedPieces))) = (PIECES)) & !(nn).(((((nn) : (((0) .. ((numExternal - 1)))))) => ((card(((board.externalPos) |> (({nn})))) <= 2) & ((not(((nn) : (((stars) \/ (ran(startPoint))))))) => ((card(((((board.externalPos)~) ; (colorOf)) )[({nn})]) <= 1)))))) & ((turn.gameStarted) : (BOOL)) & ((turn.enabledColors) : (POW(COLORS))) & ((turn.enabledColors) : (FIN(turn.enabledColors))) & ((turn.color) : (COLORS)) & ((turn.hasRoll) : (BOOL)) & ((turn.diceValue) : (((0) .. (6)))) & ((turn.sixSequenceCount) : (((0) .. (2)))) & turn.finishOrder : ((0) .. ((numColors - 1))) +-> COLORS & turn.finishOrder~ : COLORS +-> ((0) .. ((numColors - 1))) & ((turn.finishOrder) : (((((0) .. ((numColors - 1)))) >+> (COLORS)))) & ((turn.finishOrder) : (FIN(turn.finishOrder))) & ((((turn.gameStarted) = (FALSE))) or ((2 <= card(turn.enabledColors)) & ((turn.color) : (turn.enabledColors)) & ran(turn.finishOrder) : POW( turn.enabledColors)));
((board.lockedPieces) = (board.lockedPieces$1)) & ((board.externalPos) = (board.externalPos$1)) & ((board.internalPos) = (board.internalPos$1)) & ((turn.gameStarted) = (turn.gameStarted$1)) & ((turn.enabledColors) = (turn.enabledColors$1)) & ((turn.color) = (turn.color$1)) & ((turn.hasRoll) = (turn.hasRoll$1)) & ((turn.diceValue) = (turn.diceValue$1)) & ((turn.sixSequenceCount) = (turn.sixSequenceCount$1)) & ((turn.finishOrder) = (turn.finishOrder$1));
((cc) : (COLORS));
not(((cc) : (turn.enabledColors$1)));
((turn.gameStarted$1) = (FALSE));
"Refinement is correct";
((((((turn.enabledColors$1) \/ (({cc})))) \/ (({cc})))) = (turn.enabledColors$1));
((cc) : (turn.enabledColors$1));
((((turn.enabledColors$1 - ({cc})) - ({cc}))) = (turn.enabledColors$1));
(2 <= card(turn.enabledColors$1));
((turn.color$2) : (turn.enabledColors$1));
((PIECES) = (board.lockedPieces$1));
(({}) = (board.externalPos$1));
(({}) = (board.internalPos$1));
((TRUE) = (turn.gameStarted$1));
((TRUE) = (turn.hasRoll$1));
((0) = (turn.diceValue$1));
((0) = (turn.sixSequenceCount$1));
(({}) = (turn.finishOrder$1));
((turn.color$1) : (turn.enabledColors$1));
((turn.gameStarted$1) = (TRUE));
((pp) : (PIECES));
(((colorOf )(pp)) = (turn.color$1));
((turn.diceValue$1) = (6));
((pp) : (board.lockedPieces$1));
(card(((board.externalPos$1) |> (({(startPoint )((colorOf )(pp))})))) +1 <= 2);
not(((turn.diceValue$1) = (0)));
((FALSE) : (BOOL));
"Precondition predicate";
((((board.lockedPieces$1 - ({pp})) - ({pp}))) = (board.lockedPieces$1));
((((((board.externalPos$1) <+ (({((pp) |-> ((startPoint )((colorOf )(pp))))})))) <+ (({((pp) |-> ((startPoint )((colorOf )(pp))))})))) = (board.externalPos$1));
((turn.hasRoll$1) = (TRUE));
((((turn.diceValue$1) = (0))) or (not(#(pp).(((pp) : (PIECES)) & (((colorOf )(pp)) = (turn.color$1)) & ((((turn.diceValue$1) = (6)) & ((pp) : (board.lockedPieces$1)) & (card(((board.externalPos$1) |> (({(startPoint )((colorOf )(pp))})))) +1 <= 2)) or (not(((turn.diceValue$1) = (0))))) & not(((pp) : (board.lockedPieces$1))) & ((((pp) : (dom(board.externalPos$1)))) => ((((turn.diceValue$1 <= (((((((((startPoint )((colorOf )(pp)) + numExternal) - 2)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal))) & !(nn).(((((nn) : (((0) .. ((numExternal - 1))))) & not(((nn) = ((board.externalPos$1 )(pp)))) & (((((nn - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal)) <= ((((((((board.externalPos$1 )(pp) + turn.diceValue$1)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal)))) => ((card(((board.externalPos$1) |> (({nn})))) +1 <= 2))))) or ((((turn.diceValue$1 - (((((((((startPoint )((colorOf )(pp)) + numExternal) - 2)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal))) - 1) +1 <= numInternal) & !(nn).(((((nn) : (((0) .. ((numExternal - 1))))) & not(((nn) = ((board.externalPos$1 )(pp)))) & (((((nn - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal)) <= (((((((((startPoint )((colorOf )(pp)) + numExternal) - 2)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal)))) => ((card(((board.externalPos$1) |> (({nn})))) +1 <= 2)))))))) & ((((pp) : (dom(board.internalPos$1)))) => ((((board.internalPos$1 )(pp) + turn.diceValue$1) +1 <= numInternal)))))));
((dd) : (((1) .. (6))));
((dd) = (6));
(turn.sixSequenceCount$1 +1 <= 2);
not((turn.sixSequenceCount$1 +1 <= 2));
not(((dd) = (6)));
#(dd$1).(((dd$1) : (((1) .. (6)))) & ((((dd$1) = (6))) => (((((turn.sixSequenceCount$1 + 1) +1 <= 2)) => (((dd$1) = (turn.diceValue$1)) & ((((turn.sixSequenceCount$1 + 1) + 1)) = (turn.sixSequenceCount$1)) & ((dd) = (dd$1)))) & ((not(((turn.sixSequenceCount$1 + 1) +1 <= 2))) => (((FALSE) = (turn.hasRoll$1)) & ((0) = (turn.diceValue$1)) & ((0) = (turn.sixSequenceCount$1)) & ((dd) = (dd$1)))))) & ((not(((dd$1) = (6)))) => (((FALSE) = (turn.hasRoll$1)) & ((dd$1) = (turn.diceValue$1)) & (((turn.sixSequenceCount$1 + 1)) = (turn.sixSequenceCount$1)) & ((dd) = (dd$1)))));
#(dd$1).(((dd$1) : (((1) .. (6)))) & ((((dd$1) = (6))) => ((((0 +1 <= 2)) => (((FALSE) = (turn.hasRoll$1)) & ((dd$1) = (turn.diceValue$1)) & (((0 + 1)) = (turn.sixSequenceCount$1)) & ((dd) = (dd$1)))) & ((not((0 +1 <= 2))) => (((FALSE) = (turn.hasRoll$1)) & ((0) = (turn.diceValue$1)) & ((0) = (turn.sixSequenceCount$1)) & ((dd) = (dd$1)))))) & ((not(((dd$1) = (6)))) => (((FALSE) = (turn.hasRoll$1)) & ((dd$1) = (turn.diceValue$1)) & ((0) = (turn.sixSequenceCount$1)) & ((dd) = (dd$1)))));
#(dd$1).(((dd$1) : (((1) .. (6)))) & ((((dd$1) = (6))) => ((((turn.sixSequenceCount$1 +1 <= 2)) => (((FALSE) = (turn.hasRoll$1)) & ((dd$1) = (turn.diceValue$1)) & (((turn.sixSequenceCount$1 + 1)) = (turn.sixSequenceCount$1)) & ((dd) = (dd$1)))) & ((not((turn.sixSequenceCount$1 +1 <= 2))) => (((FALSE) = (turn.hasRoll$1)) & ((0) = (turn.diceValue$1)) & ((0) = (turn.sixSequenceCount$1)) & ((dd) = (dd$1)))))) & ((not(((dd$1) = (6)))) => (((FALSE) = (turn.hasRoll$1)) & ((dd$1) = (turn.diceValue$1)) & ((dd) = (dd$1)))));
((turn.hasRoll$1) = (FALSE));
(card(turn.finishOrder$1) +1 <= card(turn.enabledColors$1));
((numJumps) = (min(SET(nn).(((nn) : (((1) .. (numColors)))) & (((colorsOrder )((((((colorsOrder)~ )(turn.color$1) + nn)) mod (numColors)))) : ((turn.enabledColors$1 - ran(turn.finishOrder$1))))))));
((nn) : (((1) .. (numColors))));
((turn.color$1) : (dom((colorsOrder)~)));
(((colorsOrder)~) : (((dom((colorsOrder)~)) +-> (ran((colorsOrder)~)))));
(0 <= (((colorsOrder)~ )(turn.color$1) + numJumps));
(1 <= numColors);
(((((((colorsOrder)~ )(turn.color$1) + numJumps)) mod (numColors))) : (dom(colorsOrder)));
((colorsOrder) : (((dom(colorsOrder)) +-> (ran(colorsOrder)))));
(((colorsOrder )((((((colorsOrder)~ )(turn.color$1) + numJumps)) mod (numColors)))) : (dom((colorsOrder)~)));
(0 <= (((colorsOrder)~ )((colorsOrder )((((((colorsOrder)~ )(turn.color$1) + numJumps)) mod (numColors)))) + nn));
(((((((colorsOrder)~ )((colorsOrder )((((((colorsOrder)~ )(turn.color$1) + numJumps)) mod (numColors)))) + nn)) mod (numColors))) : (dom(colorsOrder)));
not(((SET(nn).(((nn) : (((1) .. (numColors)))) & (((colorsOrder )((((((colorsOrder)~ )((colorsOrder )((((((colorsOrder)~ )(turn.color$1) + numJumps)) mod (numColors)))) + nn)) mod (numColors)))) : ((turn.enabledColors$1 - ran(turn.finishOrder$1)))))) = ({})));
((((SET(nn).(((nn) : (((1) .. (numColors)))) & (((colorsOrder )((((((colorsOrder)~ )((colorsOrder )((((((colorsOrder)~ )(turn.color$1) + numJumps)) mod (numColors)))) + nn)) mod (numColors)))) : ((turn.enabledColors$1 - ran(turn.finishOrder$1)))))) /\ ((INTEGER - NATURAL)))) : (FIN(INTEGER)));
(((colorsOrder )((((((colorsOrder)~ )((colorsOrder )((((((colorsOrder)~ )(turn.color$1) + numJumps)) mod (numColors)))) + min(SET(nn).(((nn) : (((1) .. (numColors)))) & (((colorsOrder )((((((colorsOrder)~ )((colorsOrder )((((((colorsOrder)~ )(turn.color$1) + numJumps)) mod (numColors)))) + nn)) mod (numColors)))) : ((turn.enabledColors$1 - ran(turn.finishOrder$1)))))))) mod (numColors)))) = (turn.color$1));
not(((pp) : (board.lockedPieces$1)));
((((pp) : (dom(board.externalPos$1)))) => ((((turn.diceValue$1 <= (((((((((startPoint )((colorOf )(pp)) + numExternal) - 2)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal))) & !(nn).(((((nn) : (((0) .. ((numExternal - 1))))) & not(((nn) = ((board.externalPos$1 )(pp)))) & (((((nn - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal)) <= ((((((((board.externalPos$1 )(pp) + turn.diceValue$1)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal)))) => ((card(((board.externalPos$1) |> (({nn})))) +1 <= 2))))) or ((((turn.diceValue$1 - (((((((((startPoint )((colorOf )(pp)) + numExternal) - 2)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal))) - 1) +1 <= numInternal) & !(nn).(((((nn) : (((0) .. ((numExternal - 1))))) & not(((nn) = ((board.externalPos$1 )(pp)))) & (((((nn - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal)) <= (((((((((startPoint )((colorOf )(pp)) + numExternal) - 2)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal)))) => ((card(((board.externalPos$1) |> (({nn})))) +1 <= 2))))))));
((((pp) : (dom(board.internalPos$1)))) => ((((board.internalPos$1 )(pp) + turn.diceValue$1) +1 <= numInternal)));
((pp) : (dom(board.externalPos$1)));
(turn.diceValue$1 <= (((((((((startPoint )((colorOf )(pp)) + numExternal) - 2)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal)));
not((((((turn.diceValue$1 + (board.externalPos$1 )(pp))) mod (numExternal))) : (((stars) \/ (ran(startPoint))))));
not((((((((board.externalPos$1)~) ; (colorOf)) )[({(((turn.diceValue$1 + (board.externalPos$1 )(pp))) mod (numExternal))})] - ({(colorOf )(pp)}))) = ({})));
not(not((((((turn.diceValue$1 + (board.externalPos$1 )(pp))) mod (numExternal))) : (((stars) \/ (ran(startPoint)))))) & not((((((((board.externalPos$1)~) ; (colorOf)) )[({(((turn.diceValue$1 + (board.externalPos$1 )(pp))) mod (numExternal))})] - ({(colorOf )(pp)}))) = ({}))));
not(((pp) : (dom(board.externalPos$1))) & (turn.diceValue$1 <= (((((((((startPoint )((colorOf )(pp)) + numExternal) - 2)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal))));
((((pp) : (dom(board.internalPos$1))) & (((turn.diceValue$1 + (board.internalPos$1 )(pp))) = ((numInternal - 1)))) or (((pp) : (dom(board.externalPos$1))) & ((((turn.diceValue$1 - (((((((((startPoint )((colorOf )(pp)) + numExternal) - 2)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal))) - 1)) = ((numInternal - 1)))));
((card(((((board.internalPos$1)~ )[({(numInternal - 1)})]) /\ (((colorOf)~ )[({turn.color$1})])))) = ((numPiecesByColor - 1)));
not(((card(((((board.internalPos$1)~ )[({(numInternal - 1)})]) /\ (((colorOf)~ )[({turn.color$1})])))) = ((numPiecesByColor - 1))));
not(((((pp) : (dom(board.internalPos$1))) & (((turn.diceValue$1 + (board.internalPos$1 )(pp))) = ((numInternal - 1)))) or (((pp) : (dom(board.externalPos$1))) & ((((turn.diceValue$1 - (((((((((startPoint )((colorOf )(pp)) + numExternal) - 2)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal))) - 1)) = ((numInternal - 1))))));
not(((pp) : (dom(board.externalPos$1))));
((board.externalPos$1) : (((dom(board.externalPos$1)) +-> (ran(board.externalPos$1)))));
(0 <= (turn.diceValue$1 + (board.externalPos$1 )(pp)));
(1 <= numExternal);
((((board.lockedPieces$1) \/ (((board.externalPos$1)~ )[({(((turn.diceValue$1 + (board.externalPos$1 )(pp))) mod (numExternal))})]))) = (board.lockedPieces$1));
((((((board.externalPos$1) |>> (({(((turn.diceValue$1 + (board.externalPos$1 )(pp))) mod (numExternal))})))) <+ (({((pp) |-> ((((turn.diceValue$1 + (board.externalPos$1 )(pp))) mod (numExternal))))})))) = (board.externalPos$1));
((((board.externalPos$1) <+ (({((pp) |-> ((((turn.diceValue$1 + (board.externalPos$1 )(pp))) mod (numExternal))))})))) = (board.externalPos$1));
((((({pp})) <<| (board.externalPos$1))) = (board.externalPos$1));
((((board.internalPos$1) <+ (({((pp) |-> (((turn.diceValue$1 - (((((((((startPoint )((colorOf )(pp)) + numExternal) - 2)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal))) - 1)))})))) = (board.internalPos$1));
((FALSE) = (turn.hasRoll$1));
((((turn.finishOrder$1) <+ (({((card(turn.finishOrder$1)) |-> (turn.color$1))})))) = (turn.finishOrder$1));
((((board.internalPos$1) <+ (({((pp) |-> ((turn.diceValue$1 + (board.internalPos$1 )(pp))))})))) = (board.internalPos$1));
((dd$1) = (turn.diceValue$1));
((ee$1) = (board.externalPos$1));
((ii$1) = (board.internalPos$1));
(card(turn.finishOrder$1) +1 <= numColors);
((cc$1) = (turn.color$1));
(1 <= card(turn.finishOrder$1));
((FALSE) = (turn.gameStarted$1));
((oo$1) = (turn.finishOrder$1));
((pp) : (dom(board.internalPos$1)));
(((turn.diceValue$1 <= (((((((((startPoint )((colorOf )(pp)) + numExternal) - 2)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal))) & !(nn).(((((nn) : (((0) .. ((numExternal - 1))))) & not(((nn) = ((board.externalPos$1 )(pp)))) & (((((nn - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal)) <= ((((((((board.externalPos$1 )(pp) + turn.diceValue$1)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal)))) => ((card(((board.externalPos$1) |> (({nn})))) +1 <= 2))))) or ((((turn.diceValue$1 - (((((((((startPoint )((colorOf )(pp)) + numExternal) - 2)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal))) - 1) +1 <= numInternal) & !(nn).(((((nn) : (((0) .. ((numExternal - 1))))) & not(((nn) = ((board.externalPos$1 )(pp)))) & (((((nn - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal)) <= (((((((((startPoint )((colorOf )(pp)) + numExternal) - 2)) mod (numExternal)) - (board.externalPos$1 )(pp)) + numExternal)) mod (numExternal)))) => ((card(((board.externalPos$1) |> (({nn})))) +1 <= 2))))));
(((board.internalPos$1 )(pp) + turn.diceValue$1) +1 <= numInternal);
((board.lockedPieces) = (board.lockedPieces$1));
((board.externalPos) = (board.externalPos$1));
((board.internalPos) = (board.internalPos$1));
((turn.gameStarted) = (turn.gameStarted$1));
((turn.enabledColors) = (turn.enabledColors$1));
((turn.color) = (turn.color$1));
((turn.hasRoll) = (turn.hasRoll$1));
((turn.diceValue) = (turn.diceValue$1));
((turn.sixSequenceCount) = (turn.sixSequenceCount$1));
((turn.finishOrder) = (turn.finishOrder$1));
((color) : (COLORS));
((ii) : (((0) .. (numPieces))));
((((bb) = (TRUE))) => (((((colorOf)~ )[({color})]) /\ ((piecesOrder )[((0) .. ((ii - 1)))])) : POW( ((board.internalPos$1)~ )[({(numInternal - 1)})]))) & ((((((colorOf)~ )[({color})]) /\ ((piecesOrder )[((0) .. ((ii - 1)))])) : POW( ((board.internalPos$1)~ )[({(numInternal - 1)})])) => (((bb) = (TRUE))));
(ii +1 <= numPieces);
((bb) = (TRUE));
(((piecesOrder )(ii)) : (PIECES));
(((piecesOrder )(ii)) : (dom(board.externalPos$1)));
(((colorOf )((piecesOrder )(ii))) = (color));
not(((-1) = ((numInternal - 1))));
not((((colorOf )((piecesOrder )(ii))) = (color)) & not(((-1) = ((numInternal - 1)))));
not((((piecesOrder )(ii)) : (dom(board.externalPos$1))));
(((piecesOrder )(ii)) : (dom(board.internalPos$1)));
not((((board.internalPos$1 )((piecesOrder )(ii))) = ((numInternal - 1))));
not((((colorOf )((piecesOrder )(ii))) = (color)) & not((((board.internalPos$1 )((piecesOrder )(ii))) = ((numInternal - 1)))));
not((((piecesOrder )(ii)) : (dom(board.internalPos$1))));
not((ii +1 <= numPieces) & ((bb) = (TRUE)));
"Loop initialisation";
((0) : (((0) .. (numPieces))));
((((colorOf)~ )[({color})]) /\ ((piecesOrder )[((0) .. ((0 - 1)))])) : POW( ((board.internalPos$1)~ )[({(numInternal - 1)})]);
"Loop invariant is preserved";
(((ii + 1)) : (((0) .. (numPieces))));
not(((((colorOf)~ )[({color})]) /\ ((piecesOrder )[((0) .. (((ii + 1) - 1)))])) : POW( ((board.internalPos$1)~ )[({(numInternal - 1)})]));
((((bb) = (TRUE))) => (((((colorOf)~ )[({color})]) /\ ((piecesOrder )[((0) .. (((ii + 1) - 1)))])) : POW( ((board.internalPos$1)~ )[({(numInternal - 1)})]))) & ((((((colorOf)~ )[({color})]) /\ ((piecesOrder )[((0) .. (((ii + 1) - 1)))])) : POW( ((board.internalPos$1)~ )[({(numInternal - 1)})])) => (((bb) = (TRUE))));
"Loop variant is positive";
(0 <= (numPieces - ii));
"Variant is decreasing";
((numPieces - (ii + 1)) +1 <= (numPieces - ii));
"End of loop";
((bb) = (bool(((colorOf)~ )[({color})] : POW( ((board.internalPos$1)~ )[({(numInternal - 1)})]))));
((n1) : (((0) .. (51))));
((n2) : (((0) .. (51))));
((nn) : (((0) .. ((numExternal - 1)))));
not(((nn) = (n1)));
(((((nn - n1) + numExternal)) mod (numExternal)) <= ((((n2 - n1) + numExternal)) mod (numExternal)));
(card(((board.externalPos$1) |> (({nn})))) +1 <= 2);
((board.lockedPieces) : (POW(PIECES)));
((board.externalPos) : (((PIECES) +-> (((0) .. ((numExternal - 1)))))));
((board.internalPos) : (((PIECES) +-> (((0) .. ((numInternal - 1)))))));
((((dom(board.externalPos)) /\ (dom(board.internalPos)))) = ({}));
((((dom(board.externalPos)) /\ (board.lockedPieces))) = ({}));
((((dom(board.internalPos)) /\ (board.lockedPieces))) = ({}));
((((((dom(board.externalPos)) \/ (dom(board.internalPos)))) \/ (board.lockedPieces))) = (PIECES));
!(nn).(((((nn) : (((0) .. ((numExternal - 1)))))) => ((card(((board.externalPos) |> (({nn})))) <= 2) & ((not(((nn) : (((stars) \/ (ran(startPoint))))))) => ((card(((((board.externalPos)~) ; (colorOf)) )[({nn})]) <= 1))))));
((turn.gameStarted) : (BOOL));
((turn.enabledColors) : (POW(COLORS)));
((turn.enabledColors) : (FIN(turn.enabledColors)));
((turn.color) : (COLORS));
((turn.hasRoll) : (BOOL));
((turn.diceValue) : (((0) .. (6))));
((turn.sixSequenceCount) : (((0) .. (2))));
turn.finishOrder : ((0) .. ((numColors - 1))) +-> COLORS & turn.finishOrder~ : COLORS +-> ((0) .. ((numColors - 1))) & ((turn.finishOrder) : (((((0) .. ((numColors - 1)))) >+> (COLORS))));
((turn.finishOrder) : (FIN(turn.finishOrder)));
((((turn.gameStarted) = (FALSE))) or ((2 <= card(turn.enabledColors)) & ((turn.color) : (turn.enabledColors)) & ran(turn.finishOrder) : POW( turn.enabledColors)));
((turn.diceValue) = (6));
((pp) : (board.lockedPieces));
"Operation is well defined";
((pp) : (dom(colorOf)));
((colorOf) : (((dom(colorOf)) +-> (ran(colorOf)))));
(((colorOf )(pp)) : (dom(startPoint)));
((startPoint) : (((dom(startPoint)) +-> (ran(startPoint)))));
((((board.externalPos) |> (({(startPoint )((colorOf )(pp))})))) : (FIN(((board.externalPos) |> (({(startPoint )((colorOf )(pp))}))))));
(0 <= ((nn - n1) + numExternal));
(0 <= ((n2 - n1) + numExternal));
((((board.externalPos) |> (({nn})))) : (FIN(((board.externalPos) |> (({nn}))))));
((ii) : (dom(piecesOrder)));
((piecesOrder) : (((dom(piecesOrder)) +-> (ran(piecesOrder)))));
(((piecesOrder )(ii)) : (dom(colorOf)))
END
&
THEORY EnumerateX
END
